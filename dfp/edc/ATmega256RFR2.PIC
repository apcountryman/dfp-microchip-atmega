<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<edc:PIC xmlns:atdf="http://crownking/atdf" xmlns:edc="http://crownking/edc" xmlns:ltx="http://crownking/ltx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://crownking/edc edc/PIC.xsd" edc:name="ATmega256RFR2" edc:arch="avr8" edc:procid="0x0000" atdf:architecture="AVR8" atdf:family="megaAVR" edc:hasFreeze="false">
  <edc:Properties>
    <edc:Property edc:propkey="file.registers.are.odd.address.accessible" edc:propvalue="true"/>
  </edc:Properties>
  <edc:Power>
    <edc:VDD edc:minvoltage="1.8" edc:maxvoltage="3.6" edc:nominalvoltage="3.300"/>
  </edc:Power>
  <edc:Programming edc:haslvp2="true" edc:haschecksum="false">
    <edc:ProgrammingRowSize edc:progop="pgm" edc:nzsize="256"/>
    <edc:ProgrammingRowSize edc:progop="cfg" edc:nzsize="1"/>
    <edc:ProgrammingRowSize edc:progop="eedata" edc:nzsize="8"/>
  </edc:Programming>
  <edc:ArchDef edc:name="avr8" edc:desc="avr8">
    <edc:MemTraits>
      <edc:ProgramMemTraits edc:addrinc="0x1" edc:locsize="0x2" edc:wordimpl="0xFFFF" edc:wordinit="0xFFFF" edc:wordsafe="0xFFFF" edc:wordsize="0xFFFF"/>
      <edc:DataMemTraits edc:addrinc="0x1" edc:locsize="0x1" edc:wordimpl="0xFF" edc:wordinit="0xFF" edc:wordsafe="0xFF" edc:wordsize="0x1"/>
      <edc:EEDataMemTraits edc:magicoffset="0x810000"/>
    </edc:MemTraits>
  </edc:ArchDef>
  <edc:InstructionSet edc:instructionsetid="avr8">
    <edc:InstructionSet edc:instructionsetid="avr8base"/>
    <edc:InstructionSet edc:instructionsetid="avr8brk"/>
    <edc:InstructionSet edc:instructionsetid="avr8elpm"/>
    <edc:InstructionSet edc:instructionsetid="avr8movw"/>
    <edc:InstructionSet edc:instructionsetid="avr8lpm"/>
    <edc:InstructionSet edc:instructionsetid="avr8lpmx"/>
    <edc:InstructionSet edc:instructionsetid="avr8mega"/>
    <edc:InstructionSet edc:instructionsetid="avr8sram"/>
    <edc:InstructionSet edc:instructionsetid="avr8mul"/>
    <edc:InstructionSet edc:instructionsetid="avr8spm"/>
    <edc:InstructionSet edc:instructionsetid="avr8eind"/>
    <edc:InstructionSet edc:instructionsetid="avr8elpmx"/>
  </edc:InstructionSet>
  <edc:InterruptList>
    <edc:Interrupt edc:irq="0" edc:cname="RESET" edc:desc="External Pin,Power-on Reset,Brown-out Reset,Watchdog Reset,and JTAG AVR Reset. See Datasheet."/>
    <edc:Interrupt edc:irq="1" edc:cname="INT0" edc:desc="External Interrupt Request 0"/>
    <edc:Interrupt edc:irq="2" edc:cname="INT1" edc:desc="External Interrupt Request 1"/>
    <edc:Interrupt edc:irq="3" edc:cname="INT2" edc:desc="External Interrupt Request 2"/>
    <edc:Interrupt edc:irq="4" edc:cname="INT3" edc:desc="External Interrupt Request 3"/>
    <edc:Interrupt edc:irq="5" edc:cname="INT4" edc:desc="External Interrupt Request 4"/>
    <edc:Interrupt edc:irq="6" edc:cname="INT5" edc:desc="External Interrupt Request 5"/>
    <edc:Interrupt edc:irq="7" edc:cname="INT6" edc:desc="External Interrupt Request 6"/>
    <edc:Interrupt edc:irq="8" edc:cname="INT7" edc:desc="External Interrupt Request 7"/>
    <edc:Interrupt edc:irq="9" edc:cname="PCINT0" edc:desc="Pin Change Interrupt Request 0"/>
    <edc:Interrupt edc:irq="10" edc:cname="PCINT1" edc:desc="Pin Change Interrupt Request 1"/>
    <edc:Interrupt edc:irq="11" edc:cname="PCINT2" edc:desc="Pin Change Interrupt Request 2"/>
    <edc:Interrupt edc:irq="12" edc:cname="WDT" edc:desc="Watchdog Time-out Interrupt"/>
    <edc:Interrupt edc:irq="13" edc:cname="TIMER2_COMPA" edc:desc="Timer/Counter2 Compare Match A"/>
    <edc:Interrupt edc:irq="14" edc:cname="TIMER2_COMPB" edc:desc="Timer/Counter2 Compare Match B"/>
    <edc:Interrupt edc:irq="15" edc:cname="TIMER2_OVF" edc:desc="Timer/Counter2 Overflow"/>
    <edc:Interrupt edc:irq="16" edc:cname="TIMER1_CAPT" edc:desc="Timer/Counter1 Capture Event"/>
    <edc:Interrupt edc:irq="17" edc:cname="TIMER1_COMPA" edc:desc="Timer/Counter1 Compare Match A"/>
    <edc:Interrupt edc:irq="18" edc:cname="TIMER1_COMPB" edc:desc="Timer/Counter1 Compare Match B"/>
    <edc:Interrupt edc:irq="19" edc:cname="TIMER1_COMPC" edc:desc="Timer/Counter1 Compare Match C"/>
    <edc:Interrupt edc:irq="20" edc:cname="TIMER1_OVF" edc:desc="Timer/Counter1 Overflow"/>
    <edc:Interrupt edc:irq="21" edc:cname="TIMER0_COMPA" edc:desc="Timer/Counter0 Compare Match A"/>
    <edc:Interrupt edc:irq="22" edc:cname="TIMER0_COMPB" edc:desc="Timer/Counter0 Compare Match B"/>
    <edc:Interrupt edc:irq="23" edc:cname="TIMER0_OVF" edc:desc="Timer/Counter0 Overflow"/>
    <edc:Interrupt edc:irq="24" edc:cname="SPI_STC" edc:desc="SPI Serial Transfer Complete"/>
    <edc:Interrupt edc:irq="25" edc:cname="USART0_RX" edc:desc="USART0, Rx Complete"/>
    <edc:Interrupt edc:irq="26" edc:cname="USART0_UDRE" edc:desc="USART0 Data register Empty"/>
    <edc:Interrupt edc:irq="27" edc:cname="USART0_TX" edc:desc="USART0, Tx Complete"/>
    <edc:Interrupt edc:irq="28" edc:cname="ANALOG_COMP" edc:desc="Analog Comparator"/>
    <edc:Interrupt edc:irq="29" edc:cname="ADC" edc:desc="ADC Conversion Complete"/>
    <edc:Interrupt edc:irq="30" edc:cname="EE_READY" edc:desc="EEPROM Ready"/>
    <edc:Interrupt edc:irq="31" edc:cname="TIMER3_CAPT" edc:desc="Timer/Counter3 Capture Event"/>
    <edc:Interrupt edc:irq="32" edc:cname="TIMER3_COMPA" edc:desc="Timer/Counter3 Compare Match A"/>
    <edc:Interrupt edc:irq="33" edc:cname="TIMER3_COMPB" edc:desc="Timer/Counter3 Compare Match B"/>
    <edc:Interrupt edc:irq="34" edc:cname="TIMER3_COMPC" edc:desc="Timer/Counter3 Compare Match C"/>
    <edc:Interrupt edc:irq="35" edc:cname="TIMER3_OVF" edc:desc="Timer/Counter3 Overflow"/>
    <edc:Interrupt edc:irq="36" edc:cname="USART1_RX" edc:desc="USART1, Rx Complete"/>
    <edc:Interrupt edc:irq="37" edc:cname="USART1_UDRE" edc:desc="USART1 Data register Empty"/>
    <edc:Interrupt edc:irq="38" edc:cname="USART1_TX" edc:desc="USART1, Tx Complete"/>
    <edc:Interrupt edc:irq="39" edc:cname="TWI" edc:desc="2-wire Serial Interface"/>
    <edc:Interrupt edc:irq="40" edc:cname="SPM_READY" edc:desc="Store Program Memory Read"/>
    <edc:Interrupt edc:irq="41" edc:cname="TIMER4_CAPT" edc:desc="Timer/Counter4 Capture Event"/>
    <edc:Interrupt edc:irq="42" edc:cname="TIMER4_COMPA" edc:desc="Timer/Counter4 Compare Match A"/>
    <edc:Interrupt edc:irq="43" edc:cname="TIMER4_COMPB" edc:desc="Timer/Counter4 Compare Match B"/>
    <edc:Interrupt edc:irq="44" edc:cname="TIMER4_COMPC" edc:desc="Timer/Counter4 Compare Match C"/>
    <edc:Interrupt edc:irq="45" edc:cname="TIMER4_OVF" edc:desc="Timer/Counter4 Overflow"/>
    <edc:Interrupt edc:irq="46" edc:cname="TIMER5_CAPT" edc:desc="Timer/Counter5 Capture Event"/>
    <edc:Interrupt edc:irq="47" edc:cname="TIMER5_COMPA" edc:desc="Timer/Counter5 Compare Match A"/>
    <edc:Interrupt edc:irq="48" edc:cname="TIMER5_COMPB" edc:desc="Timer/Counter5 Compare Match B"/>
    <edc:Interrupt edc:irq="49" edc:cname="TIMER5_COMPC" edc:desc="Timer/Counter5 Compare Match C"/>
    <edc:Interrupt edc:irq="50" edc:cname="TIMER5_OVF" edc:desc="Timer/Counter5 Overflow"/>
    <edc:Interrupt edc:irq="57" edc:cname="TRX24_PLL_LOCK" edc:desc="TRX24 - PLL lock interrupt"/>
    <edc:Interrupt edc:irq="58" edc:cname="TRX24_PLL_UNLOCK" edc:desc="TRX24 - PLL unlock interrupt"/>
    <edc:Interrupt edc:irq="59" edc:cname="TRX24_RX_START" edc:desc="TRX24 - Receive start interrupt"/>
    <edc:Interrupt edc:irq="60" edc:cname="TRX24_RX_END" edc:desc="TRX24 - RX_END interrupt"/>
    <edc:Interrupt edc:irq="61" edc:cname="TRX24_CCA_ED_DONE" edc:desc="TRX24 - CCA/ED done interrupt"/>
    <edc:Interrupt edc:irq="62" edc:cname="TRX24_XAH_AMI" edc:desc="TRX24 - XAH - AMI"/>
    <edc:Interrupt edc:irq="63" edc:cname="TRX24_TX_END" edc:desc="TRX24 - TX_END interrupt"/>
    <edc:Interrupt edc:irq="64" edc:cname="TRX24_AWAKE" edc:desc="TRX24 AWAKE - tranceiver is reaching state TRX_OFF"/>
    <edc:Interrupt edc:irq="65" edc:cname="SCNT_CMP1" edc:desc="Symbol counter - compare match 1 interrupt"/>
    <edc:Interrupt edc:irq="66" edc:cname="SCNT_CMP2" edc:desc="Symbol counter - compare match 2 interrupt"/>
    <edc:Interrupt edc:irq="67" edc:cname="SCNT_CMP3" edc:desc="Symbol counter - compare match 3 interrupt"/>
    <edc:Interrupt edc:irq="68" edc:cname="SCNT_OVFL" edc:desc="Symbol counter - overflow interrupt"/>
    <edc:Interrupt edc:irq="69" edc:cname="SCNT_BACKOFF" edc:desc="Symbol counter - backoff interrupt"/>
    <edc:Interrupt edc:irq="70" edc:cname="AES_READY" edc:desc="AES engine ready interrupt"/>
    <edc:Interrupt edc:irq="71" edc:cname="BAT_LOW" edc:desc="Battery monitor indicates supply voltage below threshold"/>
    <edc:Interrupt edc:irq="72" edc:cname="TRX24_TX_START" edc:desc="TRX24 TX start interrupt"/>
    <edc:Interrupt edc:irq="73" edc:cname="TRX24_AMI0" edc:desc="Address match interrupt of address filter 0"/>
    <edc:Interrupt edc:irq="74" edc:cname="TRX24_AMI1" edc:desc="Address match interrupt of address filter 1"/>
    <edc:Interrupt edc:irq="75" edc:cname="TRX24_AMI2" edc:desc="Address match interrupt of address filter 2"/>
    <edc:Interrupt edc:irq="76" edc:cname="TRX24_AMI3" edc:desc="Address match interrupt of address filter 3"/>
  </edc:InterruptList>
  <edc:PeripheralList>
    <edc:Peripheral edc:cname="AC" edc:desc="Analog Comparator"/>
    <edc:Peripheral edc:cname="USART0" edc:desc="USART"/>
    <edc:Peripheral edc:cname="USART1" edc:desc="USART"/>
    <edc:Peripheral edc:cname="TWI" edc:desc="Two Wire Serial Interface"/>
    <edc:Peripheral edc:cname="SPI" edc:desc="Serial Peripheral Interface"/>
    <edc:Peripheral edc:cname="USART0_SPI" edc:desc="Serial Peripheral Interface"/>
    <edc:Peripheral edc:cname="USART1_SPI" edc:desc="Serial Peripheral Interface"/>
    <edc:Peripheral edc:cname="PORTA" edc:desc="I/O Port"/>
    <edc:Peripheral edc:cname="PORTB" edc:desc="I/O Port"/>
    <edc:Peripheral edc:cname="PORTC" edc:desc="I/O Port"/>
    <edc:Peripheral edc:cname="PORTD" edc:desc="I/O Port"/>
    <edc:Peripheral edc:cname="PORTE" edc:desc="I/O Port"/>
    <edc:Peripheral edc:cname="PORTF" edc:desc="I/O Port"/>
    <edc:Peripheral edc:cname="PORTG" edc:desc="I/O Port"/>
    <edc:Peripheral edc:cname="TC0" edc:desc="Timer/Counter, 8-bit"/>
    <edc:Peripheral edc:cname="TC2" edc:desc="Timer/Counter, 8-bit Async"/>
    <edc:Peripheral edc:cname="WDT" edc:desc="Watchdog Timer"/>
    <edc:Peripheral edc:cname="TC5" edc:desc="Timer/Counter, 16-bit"/>
    <edc:Peripheral edc:cname="TC4" edc:desc="Timer/Counter, 16-bit"/>
    <edc:Peripheral edc:cname="TC3" edc:desc="Timer/Counter, 16-bit"/>
    <edc:Peripheral edc:cname="TC1" edc:desc="Timer/Counter, 16-bit"/>
    <edc:Peripheral edc:cname="TRX24" edc:desc="Low-Power 2.4 GHz Transceiver"/>
    <edc:Peripheral edc:cname="SYMCNT" edc:desc="MAC Symbol Counter"/>
    <edc:Peripheral edc:cname="EEPROM" edc:desc="EEPROM"/>
    <edc:Peripheral edc:cname="JTAG" edc:desc="JTAG Interface"/>
    <edc:Peripheral edc:cname="EXINT" edc:desc="External Interrupts"/>
    <edc:Peripheral edc:cname="ADC" edc:desc="Analog-to-Digital Converter"/>
    <edc:Peripheral edc:cname="BOOT_LOAD" edc:desc="Bootloader"/>
    <edc:Peripheral edc:cname="CPU" edc:desc="CPU Registers"/>
    <edc:Peripheral edc:cname="FLASH" edc:desc="FLASH Controller"/>
    <edc:Peripheral edc:cname="PWRCTRL" edc:desc="Power Controller"/>
    <edc:Peripheral edc:cname="FUSE" edc:desc="Fuses"/>
    <edc:Peripheral edc:cname="LOCKBIT" edc:desc="Lockbits"/>
  </edc:PeripheralList>
  <edc:ProgramSpace>
    <edc:CodeSector edc:regionid="IFLASH" edc:beginaddr="0x0" edc:endaddr="0x20000" atdf:pagesize="0x100" edc:rw="rw"/>
    <edc:CodeSector edc:regionid="BOOT_SECTION_1" edc:beginaddr="0x1FE00" edc:endaddr="0x20000" atdf:pagesize="0x100" edc:rw="rw"/>
    <edc:CodeSector edc:regionid="BOOT_SECTION_2" edc:beginaddr="0x1FC00" edc:endaddr="0x20000" atdf:pagesize="0x100" edc:rw="rw"/>
    <edc:CodeSector edc:regionid="BOOT_SECTION_3" edc:beginaddr="0x1F800" edc:endaddr="0x20000" atdf:pagesize="0x100" edc:rw="rw"/>
    <edc:CodeSector edc:regionid="BOOT_SECTION_4" edc:beginaddr="0x1F000" edc:endaddr="0x20000" atdf:pagesize="0x100" edc:rw="rw"/>
  </edc:ProgramSpace>
  <edc:DataSpace edc:magicoffset="0x800000">
    <edc:RegardlessOfMode>
      <edc:NMMRPlace edc:regionid="corenmmrs">
        <edc:SFRDef edc:nzwidth="0x18" edc:cname="PC" edc:impl="0xFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnn" edc:por="000000000000000000000000" edc:mclr="000000000000000000000000" edc:desc="Program Counter" edc:nmmrid="60"/>
      </edc:NMMRPlace>
      <edc:SFRDataSector edc:regionid="REGISTERS" edc:beginaddr="0x0" edc:endaddr="0x20">
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R0" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x0"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R1" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x1"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R2" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x2"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R3" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x3"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R4" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x4"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R5" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x5"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R6" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x6"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R7" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x7"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R8" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x8"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R9" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x9"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R10" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0xA"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R11" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0xB"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R12" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0xC"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R13" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0xD"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R14" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0xE"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R15" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0xF"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R16" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x10"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R17" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x11"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R18" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x12"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R19" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x13"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R20" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x14"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R21" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x15"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R22" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x16"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R23" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x17"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R24" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x18"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R25" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x19"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R26" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x1A"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R27" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x1B"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R28" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x1C"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R29" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x1D"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R30" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x1E"/>
        <edc:SFRDef edc:nzwidth="0x8" edc:cname="R31" edc:impl="0xFF" edc:access="nnnnnnnn" edc:por="xxxxxxxx" edc:mclr="xxxxxxxx" edc:desc="General-Purpose Register" edc:_addr="0x1F"/>
      </edc:SFRDataSector>
      <edc:SFRDataSector edc:regionid="MAPPED_IO" edc:beginaddr="0x20" edc:endaddr="0x200">
        <edc:SFRDef ltx:memberofperipheral="PORTA" edc:cname="PINA" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x20"/>
        <edc:SFRDef ltx:memberofperipheral="PORTA" edc:cname="DDRA" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x21"/>
        <edc:SFRDef ltx:memberofperipheral="PORTA" edc:cname="PORTA" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x22"/>
        <edc:SFRDef ltx:memberofperipheral="PORTB" edc:cname="PINB" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x23"/>
        <edc:SFRDef ltx:memberofperipheral="PORTB" edc:cname="DDRB" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x24"/>
        <edc:SFRDef ltx:memberofperipheral="PORTB" edc:cname="PORTB" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x25"/>
        <edc:SFRDef ltx:memberofperipheral="PORTC" edc:cname="PINC" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x26"/>
        <edc:SFRDef ltx:memberofperipheral="PORTC" edc:cname="DDRC" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x27"/>
        <edc:SFRDef ltx:memberofperipheral="PORTC" edc:cname="PORTC" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x28"/>
        <edc:SFRDef ltx:memberofperipheral="PORTD" edc:cname="PIND" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x29"/>
        <edc:SFRDef ltx:memberofperipheral="PORTD" edc:cname="DDRD" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x2A"/>
        <edc:SFRDef ltx:memberofperipheral="PORTD" edc:cname="PORTD" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x2B"/>
        <edc:SFRDef ltx:memberofperipheral="PORTE" edc:cname="PINE" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x2C"/>
        <edc:SFRDef ltx:memberofperipheral="PORTE" edc:cname="DDRE" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x2D"/>
        <edc:SFRDef ltx:memberofperipheral="PORTE" edc:cname="PORTE" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x2E"/>
        <edc:SFRDef ltx:memberofperipheral="PORTF" edc:cname="PINF" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x2F"/>
        <edc:SFRDef ltx:memberofperipheral="PORTF" edc:cname="DDRF" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x30"/>
        <edc:SFRDef ltx:memberofperipheral="PORTF" edc:cname="PORTF" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x31"/>
        <edc:SFRDef ltx:memberofperipheral="PORTG" edc:cname="PING" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x32"/>
        <edc:SFRDef ltx:memberofperipheral="PORTG" edc:cname="DDRG" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x33"/>
        <edc:SFRDef ltx:memberofperipheral="PORTG" edc:cname="PORTG" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x34"/>
        <edc:SFRDef ltx:memberofperipheral="TC0" edc:cname="TIFR0" edc:nzwidth="0x8" edc:access="-----nnn" edc:impl="0x7" edc:_addr="0x35">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC0">
              <edc:SFRFieldDef edc:cname="TOV0" edc:nzwidth="0x1" edc:desc="Timer/Counter0 Overflow Flag"/>
              <edc:SFRFieldDef edc:cname="OCF0A" edc:nzwidth="0x1" edc:desc="Timer/Counter0 Output Compare A Match Flag"/>
              <edc:SFRFieldDef edc:cname="OCF0B" edc:nzwidth="0x1" edc:desc="Timer/Counter0 Output Compare B Match Flag"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC1" edc:cname="TIFR1" edc:nzwidth="0x8" edc:access="--n-nnnn" edc:impl="0x2F" edc:_addr="0x36">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC1">
              <edc:SFRFieldDef edc:cname="TOV1" edc:nzwidth="0x1" edc:desc="Timer/Counter1 Overflow Flag"/>
              <edc:SFRFieldDef edc:cname="OCF1A" edc:nzwidth="0x1" edc:desc="Timer/Counter1 Output Compare A Match Flag"/>
              <edc:SFRFieldDef edc:cname="OCF1B" edc:nzwidth="0x1" edc:desc="Timer/Counter1 Output Compare B Match Flag"/>
              <edc:SFRFieldDef edc:cname="OCF1C" edc:nzwidth="0x1" edc:desc="Timer/Counter1 Output Compare C Match Flag"/>
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="ICF1" edc:nzwidth="0x1" edc:desc="Timer/Counter1 Input Capture Flag"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC2" edc:cname="TIFR2" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x37">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC2">
              <edc:SFRFieldDef edc:cname="TOV2" edc:nzwidth="0x1" edc:desc="Timer/Counter2 Overflow Flag"/>
              <edc:SFRFieldDef edc:cname="OCF2A" edc:nzwidth="0x1" edc:desc="Output Compare Flag 2 A"/>
              <edc:SFRFieldDef edc:cname="OCF2B" edc:nzwidth="0x1" edc:desc="Output Compare Flag 2 B"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x5" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC3" edc:cname="TIFR3" edc:nzwidth="0x8" edc:access="--n-nnnn" edc:impl="0x2F" edc:_addr="0x38">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC3">
              <edc:SFRFieldDef edc:cname="TOV3" edc:nzwidth="0x1" edc:desc="Timer/Counter3 Overflow Flag"/>
              <edc:SFRFieldDef edc:cname="OCF3A" edc:nzwidth="0x1" edc:desc="Timer/Counter3 Output Compare A Match Flag"/>
              <edc:SFRFieldDef edc:cname="OCF3B" edc:nzwidth="0x1" edc:desc="Timer/Counter3 Output Compare B Match Flag"/>
              <edc:SFRFieldDef edc:cname="OCF3C" edc:nzwidth="0x1" edc:desc="Timer/Counter3 Output Compare C Match Flag"/>
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="ICF3" edc:nzwidth="0x1" edc:desc="Timer/Counter3 Input Capture Flag"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC4" edc:cname="TIFR4" edc:nzwidth="0x8" edc:access="--n-nnnn" edc:impl="0x2F" edc:_addr="0x39">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC4">
              <edc:SFRFieldDef edc:cname="TOV4" edc:nzwidth="0x1" edc:desc="Timer/Counter4 Overflow Flag"/>
              <edc:SFRFieldDef edc:cname="OCF4A" edc:nzwidth="0x1" edc:desc="Timer/Counter4 Output Compare A Match Flag"/>
              <edc:SFRFieldDef edc:cname="OCF4B" edc:nzwidth="0x1" edc:desc="Timer/Counter4 Output Compare B Match Flag"/>
              <edc:SFRFieldDef edc:cname="OCF4C" edc:nzwidth="0x1" edc:desc="Timer/Counter4 Output Compare C Match Flag"/>
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="ICF4" edc:nzwidth="0x1" edc:desc="Timer/Counter4 Input Capture Flag"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC5" edc:cname="TIFR5" edc:nzwidth="0x8" edc:access="--n-nnnn" edc:impl="0x2F" edc:_addr="0x3A">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC5">
              <edc:SFRFieldDef edc:cname="TOV5" edc:nzwidth="0x1" edc:desc="Timer/Counter5 Overflow Flag"/>
              <edc:SFRFieldDef edc:cname="OCF5A" edc:nzwidth="0x1" edc:desc="Timer/Counter5 Output Compare A Match Flag"/>
              <edc:SFRFieldDef edc:cname="OCF5B" edc:nzwidth="0x1" edc:desc="Timer/Counter5 Output Compare B Match Flag"/>
              <edc:SFRFieldDef edc:cname="OCF5C" edc:nzwidth="0x1" edc:desc="Timer/Counter5 Output Compare C Match Flag"/>
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="ICF5" edc:nzwidth="0x1" edc:desc="Timer/Counter5 Input Capture Flag"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="EXINT" edc:cname="PCIFR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x3B">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EXINT">
              <edc:SFRFieldDef edc:cname="PCIF" edc:nzwidth="0x3" edc:desc="Pin Change Interrupt Flags"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x5" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="EXINT" edc:cname="EIFR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x3C">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EXINT">
              <edc:SFRFieldDef edc:cname="INTF" edc:nzwidth="0x8" edc:desc="External Interrupt Flag">
                <edc:SFRFieldSemantic edc:cname="NO_EDGE_OR_LOGIC_CHANGE_ON_INT7_0_OCCURRED" edc:desc="No edge or logic change on INT7:0 occurred." edc:when="(field &amp; 0xFF) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="A_EDGE_OR_LOGIC_CHANGE_ON_INT0_OCCURRED_AND_TRIGGERED_AN_INTERRUPT_REQUEST" edc:desc="A edge or logic change on INT0 occurred and triggered an interrupt request." edc:when="(field &amp; 0xFF) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="..." edc:when="(field &amp; 0xFF) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="A_EDGE_OR_LOGIC_CHANGE_ON_INT7_OCCURRED_AND_TRIGGERED_AN_INTERRUPT_REQUEST" edc:desc="A edge or logic change on INT7 occurred and triggered an interrupt request." edc:when="(field &amp; 0xFF) == 0x80"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="EXINT" edc:cname="EIMSK" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x3D">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EXINT">
              <edc:SFRFieldDef edc:cname="INT" edc:nzwidth="0x8" edc:desc="External Interrupt Request Enable">
                <edc:SFRFieldSemantic edc:cname="ALL_EXTERNAL_PIN_INTERRUPTS_ARE_DISABLED" edc:desc="All external pin interrupts are disabled." edc:when="(field &amp; 0xFF) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="ALL_EXTERNAL_PIN_INTERRUPTS_ARE_ENABLED" edc:desc="All external pin interrupts are enabled." edc:when="(field &amp; 0xFF) == 0xff"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="CPU" edc:cname="GPIOR0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x3E">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CPU">
              <edc:SFRFieldDef edc:cname="GPIOR00" edc:nzwidth="0x1" edc:desc="General Purpose I/O Register 0 Value"/>
              <edc:SFRFieldDef edc:cname="GPIOR01" edc:nzwidth="0x1" edc:desc="General Purpose I/O Register 0 Value"/>
              <edc:SFRFieldDef edc:cname="GPIOR02" edc:nzwidth="0x1" edc:desc="General Purpose I/O Register 0 Value"/>
              <edc:SFRFieldDef edc:cname="GPIOR03" edc:nzwidth="0x1" edc:desc="General Purpose I/O Register 0 Value"/>
              <edc:SFRFieldDef edc:cname="GPIOR04" edc:nzwidth="0x1" edc:desc="General Purpose I/O Register 0 Value"/>
              <edc:SFRFieldDef edc:cname="GPIOR05" edc:nzwidth="0x1" edc:desc="General Purpose I/O Register 0 Value"/>
              <edc:SFRFieldDef edc:cname="GPIOR06" edc:nzwidth="0x1" edc:desc="General Purpose I/O Register 0 Value"/>
              <edc:SFRFieldDef edc:cname="GPIOR07" edc:nzwidth="0x1" edc:desc="General Purpose I/O Register 0 Value"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="EEPROM" edc:cname="EECR" edc:nzwidth="0x8" edc:access="--nnnnnn" edc:impl="0x3F" edc:_addr="0x3F">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EEPROM">
              <edc:SFRFieldDef edc:cname="EERE" edc:nzwidth="0x1" edc:desc="EEPROM Read Enable"/>
              <edc:SFRFieldDef edc:cname="EEPE" edc:nzwidth="0x1" edc:desc="EEPROM Programming Enable"/>
              <edc:SFRFieldDef edc:cname="EEMPE" edc:nzwidth="0x1" edc:desc="EEPROM Master Write Enable"/>
              <edc:SFRFieldDef edc:cname="EERIE" edc:nzwidth="0x1" edc:desc="EEPROM Ready Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="EEPM" edc:nzwidth="0x2" edc:desc="EEPROM Programming Mode">
                <edc:SFRFieldSemantic edc:cname="ERASE_AND_WRITE_IN_ONE_OPERATION_ATOMIC_OPERATION" edc:desc="Erase and Write in one operation (Atomic Operation)" edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="ERASE_ONLY" edc:desc="Erase only" edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="WRITE_ONLY" edc:desc="Write only" edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED_FOR_FUTURE_USE" edc:desc="Reserved for future use" edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="EEPROM" edc:cname="EEDR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x40"/>
        <edc:SFRDef ltx:memberofperipheral="EEPROM" edc:cname="EEAR" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x41"/>
        <edc:SFRDef ltx:memberofperipheral="TC0 TC2" edc:cname="GTCCR" edc:nzwidth="0x8" edc:access="n-----nn" edc:impl="0x83" edc:_addr="0x43">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC0">
              <edc:SFRFieldDef edc:cname="PSRSYNC" edc:nzwidth="0x1" edc:desc="Prescaler Reset for Synchronous Timer/Counters"/>
              <edc:SFRFieldDef edc:cname="PSRASY" edc:nzwidth="0x1" edc:desc="Prescaler Reset Timer/Counter2"/>
              <edc:AdjustPoint edc:offset="0x5"/>
              <edc:SFRFieldDef edc:cname="TSM" edc:nzwidth="0x1" edc:desc="Timer/Counter Synchronization Mode"/>
            </edc:SFRMode>
            <edc:SFRMode edc:id="DS.1" ltx:memberofperipheral="TC2">
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="PSRASY" edc:nzwidth="0x1" edc:desc="Prescaler Reset Timer/Counter2"/>
              <edc:AdjustPoint edc:offset="0x5"/>
              <edc:SFRFieldDef edc:cname="TSM" edc:nzwidth="0x1" edc:desc="Timer/Counter Synchronization Mode"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC0" edc:cname="TCCR0A" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x44">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC0">
              <edc:SFRFieldDef edc:cname="WGM0" edc:nzwidth="0x2" edc:desc="Waveform Generation Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_MODE_OF_OPERATION" edc:desc="Normal mode of operation" edc:when="(field &amp; 0x3) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_0XFF" edc:desc="PWM, phase correct, TOP=0xFF" edc:when="(field &amp; 0x3) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRA" edc:desc="CTC, TOP = OCRA" edc:when="(field &amp; 0x3) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_0XFF" edc:desc="Fast PWM, TOP=0xFF" edc:when="(field &amp; 0x3) == 0x3"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0x4"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_OCRA" edc:desc="PWM, Phase correct, TOP = OCRA" edc:when="(field &amp; 0x3) == 0x5"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0x6"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_OCRA" edc:desc="Fast PWM, TOP=OCRA" edc:when="(field &amp; 0x3) == 0x7"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x2" edc:desc="Reserved Bit"/>
              <edc:SFRFieldDef edc:cname="COM0B" edc:nzwidth="0x2" edc:desc="Compare Match Output B Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_PORT_OPERATION_OC0B_DISCONNECTED" edc:desc="Normal port operation, OC0B disconnected" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TOGGLE_OC0B_ON_COMPARE_MATCH" edc:desc="Toggle OC0B on Compare Match" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="CLEAR_OC0B_ON_COMPARE_MATCH" edc:desc="Clear OC0B on Compare Match" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="SET_OC0B_ON_COMPARE_MATCH" edc:desc="Set OC0B on Compare Match" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM0A" edc:nzwidth="0x2" edc:desc="Compare Match Output A Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_PORT_OPERATION_OC0A_DISCONNECTED" edc:desc="Normal port operation, OC0A disconnected" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TOGGLE_OC0A_ON_COMPARE_MATCH" edc:desc="Toggle OC0A on Compare Match" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="CLEAR_OC0A_ON_COMPARE_MATCH" edc:desc="Clear OC0A on Compare Match" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="SET_OC0A_ON_COMPARE_MATCH" edc:desc="Set OC0A on Compare Match" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC0" edc:cname="TCCR0B" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x45">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC0">
              <edc:SFRFieldDef edc:cname="CS0" edc:nzwidth="0x3" edc:desc="Clock Select">
                <edc:SFRFieldSemantic edc:cname="NO_CLOCK_SOURCE_TIMER_COUNTER0_STOPPED" edc:desc="No clock source (Timer/Counter0 stopped)" edc:when="(field &amp; 0x7) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_1_NO_PRESCALING" edc:desc="clk_IO/1 (no prescaling)" edc:when="(field &amp; 0x7) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_8_FROM_PRESCALER" edc:desc="clk_IO/8 (from prescaler)" edc:when="(field &amp; 0x7) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_64_FROM_PRESCALER" edc:desc="clk_IO/64 (from prescaler)" edc:when="(field &amp; 0x7) == 0x03"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_256_FROM_PRESCALER" edc:desc="clk_IO/256 (from prescaler)" edc:when="(field &amp; 0x7) == 0x04"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_1024_FROM_PRESCALER" edc:desc="clk_IO/1024 (from prescaler)" edc:when="(field &amp; 0x7) == 0x05"/>
                <edc:SFRFieldSemantic edc:cname="EXTERNAL_CLOCK_SOURCE_ON_T0_PIN_CLOCK_ON_FALLING_EDGE" edc:desc="External clock source on T0 pin, clock on falling edge" edc:when="(field &amp; 0x7) == 0x06"/>
                <edc:SFRFieldSemantic edc:cname="EXTERNAL_CLOCK_SOURCE_ON_T0_PIN_CLOCK_ON_RISING_EDGE" edc:desc="External clock source on T0 pin, clock on rising edge" edc:when="(field &amp; 0x7) == 0x07"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="WGM02" edc:nzwidth="0x1"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x2" edc:desc="Reserved Bit"/>
              <edc:SFRFieldDef edc:cname="FOC0B" edc:nzwidth="0x1" edc:desc="Force Output Compare B"/>
              <edc:SFRFieldDef edc:cname="FOC0A" edc:nzwidth="0x1" edc:desc="Force Output Compare A"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC0" edc:cname="TCNT0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x46"/>
        <edc:SFRDef ltx:memberofperipheral="TC0" edc:cname="OCR0A" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x47"/>
        <edc:SFRDef ltx:memberofperipheral="TC0" edc:cname="OCR0B" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x48"/>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0x49"/>
        <edc:SFRDef ltx:memberofperipheral="CPU" edc:cname="GPIOR1" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x4A">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CPU">
              <edc:SFRFieldDef edc:cname="GPIOR" edc:nzwidth="0x8" edc:desc="General Purpose I/O Register 1 Value"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="CPU" edc:cname="GPIOR2" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x4B">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CPU">
              <edc:SFRFieldDef edc:cname="GPIOR" edc:nzwidth="0x8" edc:desc="General Purpose I/O Register 2 Value"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SPI" edc:cname="SPCR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x4C">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SPI">
              <edc:SFRFieldDef edc:cname="SPR" edc:nzwidth="0x2" edc:desc="SPI Clock Rate Select 1 and 0">
                <edc:SFRFieldSemantic edc:cname="FOSC_4_FOSC_2_SPI2X_0_1" edc:desc="fosc/4 / fosc/2 (SPI2X=0/1)" edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="FOSC_16_FOSC_8_SPI2X_0_1" edc:desc="fosc/16 / fosc/8 (SPI2X=0/1)" edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="FOSC_64_FOSC_32_SPI2X_0_1" edc:desc="fosc/64 / fosc/32 (SPI2X=0/1)" edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="FOSC_128_FOSC_64_SPI2X_0_1" edc:desc="fosc/128 / fosc/64 (SPI2X=0/1)" edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="CPHA" edc:nzwidth="0x1" edc:desc="Clock Phase">
                <edc:SFRFieldSemantic edc:cname="SAMPLE_LEADING_EDGE_SETUP_TRAILING_EDGE" edc:desc="Sample (Leading Edge), Setup (Trailing Edge)" edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="SETUP_LEADING_EDGE_SAMPLE_TRAILING_EDGE" edc:desc="Setup (Leading Edge), Sample (Trailing Edge)" edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="CPOL" edc:nzwidth="0x1" edc:desc="Clock polarity">
                <edc:SFRFieldSemantic edc:cname="RISING_LEADING_EDGE_FALLING_TRAILING_EDGE" edc:desc="Rising (Leading Edge), Falling (Trailing Edge)" edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="FALLING_LEADING_EGDE_RISING_TRAILING_EDGE" edc:desc="Falling (Leading Egde), Rising (Trailing Edge)" edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="MSTR" edc:nzwidth="0x1" edc:desc="Master/Slave Select"/>
              <edc:SFRFieldDef edc:cname="DORD" edc:nzwidth="0x1" edc:desc="Data Order"/>
              <edc:SFRFieldDef edc:cname="SPE" edc:nzwidth="0x1" edc:desc="SPI Enable"/>
              <edc:SFRFieldDef edc:cname="SPIE" edc:nzwidth="0x1" edc:desc="SPI Interrupt Enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SPI" edc:cname="SPSR" edc:nzwidth="0x8" edc:access="nn-----n" edc:impl="0xC1" edc:_addr="0x4D">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SPI">
              <edc:SFRFieldDef edc:cname="SPI2X" edc:nzwidth="0x1" edc:desc="Double SPI Speed Bit"/>
              <edc:AdjustPoint edc:offset="0x5"/>
              <edc:SFRFieldDef edc:cname="WCOL" edc:nzwidth="0x1" edc:desc="Write Collision Flag"/>
              <edc:SFRFieldDef edc:cname="SPIF" edc:nzwidth="0x1" edc:desc="SPI Interrupt Flag"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SPI" edc:cname="SPDR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x4E"/>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0x4F"/>
        <edc:SFRDef ltx:memberofperipheral="AC" edc:cname="ACSR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x50">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="AC">
              <edc:SFRFieldDef edc:cname="ACIS" edc:nzwidth="0x2" edc:desc="Analog Comparator Interrupt Mode Select">
                <edc:SFRFieldSemantic edc:cname="INTERRUPT_ON_TOGGLE" edc:desc="Interrupt on Toggle" edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="INTERRUPT_ON_FALLING_EDGE" edc:desc="Interrupt on Falling Edge" edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="INTERRUPT_ON_RISING_EDGE" edc:desc="Interrupt on Rising Edge" edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="ACIC" edc:nzwidth="0x1" edc:desc="Analog Comparator Input Capture Enable"/>
              <edc:SFRFieldDef edc:cname="ACIE" edc:nzwidth="0x1" edc:desc="Analog Comparator Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="ACI" edc:nzwidth="0x1" edc:desc="Analog Comparator Interrupt Flag"/>
              <edc:SFRFieldDef edc:cname="ACO" edc:nzwidth="0x1" edc:desc="Analog Compare Output"/>
              <edc:SFRFieldDef edc:cname="ACBG" edc:nzwidth="0x1" edc:desc="Analog Comparator Bandgap Select"/>
              <edc:SFRFieldDef edc:cname="ACD" edc:nzwidth="0x1" edc:desc="Analog Comparator Disable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="JTAG" edc:cname="OCDR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x51">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="JTAG">
              <edc:SFRFieldDef edc:cname="OCDR" edc:nzwidth="0x8" edc:desc="On-Chip Debug Register Data">
                <edc:SFRFieldSemantic edc:cname="REFER_TO_THE_DEBUGGER_DOCUMENTATION_FOR_FURTHER_INFORMATION_ON_HOW_TO_USE_THIS_REGISTER" edc:desc="Refer to the debugger documentation for further information on how to use this register." edc:when="(field &amp; 0xFF) == 0"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0x52"/>
        <edc:SFRDef ltx:memberofperipheral="CPU" edc:cname="SMCR" edc:nzwidth="0x8" edc:access="----nnnn" edc:impl="0xF" edc:_addr="0x53">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CPU">
              <edc:SFRFieldDef edc:cname="SE" edc:nzwidth="0x1" edc:desc="Sleep Enable"/>
              <edc:SFRFieldDef edc:cname="SM" edc:nzwidth="0x3" edc:desc="Sleep Mode Select bits">
                <edc:SFRFieldSemantic edc:cname="IDLE" edc:desc="Idle" edc:when="(field &amp; 0x7) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="ADC" edc:desc="ADC Noise Reduction (If Available)" edc:when="(field &amp; 0x7) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="PDOWN" edc:desc="Power Down" edc:when="(field &amp; 0x7) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="PSAVE" edc:desc="Power Save" edc:when="(field &amp; 0x7) == 0x03"/>
                <edc:SFRFieldSemantic edc:cname="VAL_0x04" edc:desc="Reserved" edc:when="(field &amp; 0x7) == 0x04"/>
                <edc:SFRFieldSemantic edc:cname="VAL_0x05" edc:desc="Reserved" edc:when="(field &amp; 0x7) == 0x05"/>
                <edc:SFRFieldSemantic edc:cname="STDBY" edc:desc="Standby" edc:when="(field &amp; 0x7) == 0x06"/>
                <edc:SFRFieldSemantic edc:cname="ESTDBY" edc:desc="Extended Standby" edc:when="(field &amp; 0x7) == 0x07"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="JTAG CPU" edc:cname="MCUSR" edc:nzwidth="0x8" edc:access="---nnnnn" edc:impl="0x1F" edc:_addr="0x54">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="JTAG">
              <edc:AdjustPoint edc:offset="0x4"/>
              <edc:SFRFieldDef edc:cname="JTRF" edc:nzwidth="0x1" edc:desc="JTAG Reset Flag"/>
            </edc:SFRMode>
            <edc:SFRMode edc:id="DS.1" ltx:memberofperipheral="CPU">
              <edc:SFRFieldDef edc:cname="PORF" edc:nzwidth="0x1" edc:desc="Power-on Reset Flag"/>
              <edc:SFRFieldDef edc:cname="EXTRF" edc:nzwidth="0x1" edc:desc="External Reset Flag"/>
              <edc:SFRFieldDef edc:cname="BORF" edc:nzwidth="0x1" edc:desc="Brown-out Reset Flag"/>
              <edc:SFRFieldDef edc:cname="WDRF" edc:nzwidth="0x1" edc:desc="Watchdog Reset Flag"/>
              <edc:SFRFieldDef edc:cname="JTRF" edc:nzwidth="0x1" edc:desc="JTAG Reset Flag"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="JTAG CPU PWRCTRL" edc:cname="MCUCR" edc:nzwidth="0x8" edc:access="n--n--nn" edc:impl="0x93" edc:_addr="0x55">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="JTAG">
              <edc:AdjustPoint edc:offset="0x7"/>
              <edc:SFRFieldDef edc:cname="JTD" edc:nzwidth="0x1" edc:desc="JTAG Interface Disable"/>
            </edc:SFRMode>
            <edc:SFRMode edc:id="DS.1" ltx:memberofperipheral="CPU">
              <edc:SFRFieldDef edc:cname="IVCE" edc:nzwidth="0x1" edc:desc="Interrupt Vector Change Enable"/>
              <edc:SFRFieldDef edc:cname="IVSEL" edc:nzwidth="0x1" edc:desc="Interrupt Vector Select"/>
              <edc:AdjustPoint edc:offset="0x2"/>
              <edc:SFRFieldDef edc:cname="PUD" edc:nzwidth="0x1" edc:desc="Pull-up Disable"/>
              <edc:AdjustPoint edc:offset="0x2"/>
              <edc:SFRFieldDef edc:cname="JTD" edc:nzwidth="0x1" edc:desc="JTAG Interface Disable"/>
            </edc:SFRMode>
            <edc:SFRMode edc:id="DS.2" ltx:memberofperipheral="PWRCTRL">
              <edc:AdjustPoint edc:offset="0x4"/>
              <edc:SFRFieldDef edc:cname="PUD" edc:nzwidth="0x1" edc:desc="Pull-up Disable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0x56"/>
        <edc:SFRDef ltx:memberofperipheral="BOOT_LOAD" edc:cname="SPMCSR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x57">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="BOOT_LOAD">
              <edc:SFRFieldDef edc:cname="SPMEN" edc:nzwidth="0x1" edc:desc="Store Program Memory Enable"/>
              <edc:SFRFieldDef edc:cname="PGERS" edc:nzwidth="0x1" edc:desc="Page Erase"/>
              <edc:SFRFieldDef edc:cname="PGWRT" edc:nzwidth="0x1" edc:desc="Page Write"/>
              <edc:SFRFieldDef edc:cname="BLBSET" edc:nzwidth="0x1" edc:desc="Boot Lock Bit Set"/>
              <edc:SFRFieldDef edc:cname="RWWSRE" edc:nzwidth="0x1" edc:desc="Read While Write Section Read Enable"/>
              <edc:SFRFieldDef edc:cname="SIGRD" edc:nzwidth="0x1" edc:desc="Signature Row Read"/>
              <edc:SFRFieldDef edc:cname="RWWSB" edc:nzwidth="0x1" edc:desc="Read While Write Section Busy"/>
              <edc:SFRFieldDef edc:cname="SPMIE" edc:nzwidth="0x1" edc:desc="SPM Interrupt Enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x58"/>
        <edc:SFRDef ltx:memberofperipheral="CPU" edc:cname="RAMPZ" edc:nzwidth="0x8" edc:access="------nn" edc:impl="0x3" edc:_addr="0x5B">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CPU">
              <edc:SFRFieldDef edc:cname="RAMPZ" edc:nzwidth="0x2" edc:desc="Extended Z-Pointer Value">
                <edc:SFRFieldSemantic edc:cname="DEFAULT_VALUE_OF_Z_POINTER_MSB_S" edc:desc="Default value of Z-pointer MSB's." edc:when="(field &amp; 0x3) == 0"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="CPU" edc:cname="EIND" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x5C"/>
        <edc:SFRDef ltx:memberofperipheral="CPU" edc:cname="SP" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x5D"/>
        <edc:SFRDef ltx:memberofperipheral="CPU" edc:cname="SREG" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x5F">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CPU">
              <edc:SFRFieldDef edc:cname="C" edc:nzwidth="0x1" edc:desc="Carry Flag"/>
              <edc:SFRFieldDef edc:cname="Z" edc:nzwidth="0x1" edc:desc="Zero Flag"/>
              <edc:SFRFieldDef edc:cname="N" edc:nzwidth="0x1" edc:desc="Negative Flag"/>
              <edc:SFRFieldDef edc:cname="V" edc:nzwidth="0x1" edc:desc="Two's Complement Overflow Flag"/>
              <edc:SFRFieldDef edc:cname="S" edc:nzwidth="0x1" edc:desc="Sign Bit"/>
              <edc:SFRFieldDef edc:cname="H" edc:nzwidth="0x1" edc:desc="Half Carry Flag"/>
              <edc:SFRFieldDef edc:cname="T" edc:nzwidth="0x1" edc:desc="Bit Copy Storage"/>
              <edc:SFRFieldDef edc:cname="I" edc:nzwidth="0x1" edc:desc="Global Interrupt Enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="WDT" edc:cname="WDTCSR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x60">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="WDT">
              <edc:SFRFieldDef edc:cname="WDP" edc:nzwidth="0x6" edc:mask="0x27" edc:desc="Watchdog Timer Prescaler Bits">
                <edc:SFRFieldSemantic edc:cname="OSCILLATOR_CYCLES_2K" edc:desc="Oscillator Cycles 2K" edc:when="(field &amp; 0x27) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="OSCILLATOR_CYCLES_4K" edc:desc="Oscillator Cycles 4K" edc:when="(field &amp; 0x27) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="OSCILLATOR_CYCLES_8K" edc:desc="Oscillator Cycles 8K" edc:when="(field &amp; 0x27) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="OSCILLATOR_CYCLES_16K" edc:desc="Oscillator Cycles 16K" edc:when="(field &amp; 0x27) == 0x03"/>
                <edc:SFRFieldSemantic edc:cname="OSCILLATOR_CYCLES_32K" edc:desc="Oscillator Cycles 32K" edc:when="(field &amp; 0x27) == 0x04"/>
                <edc:SFRFieldSemantic edc:cname="OSCILLATOR_CYCLES_64K" edc:desc="Oscillator Cycles 64K" edc:when="(field &amp; 0x27) == 0x05"/>
                <edc:SFRFieldSemantic edc:cname="OSCILLATOR_CYCLES_128K" edc:desc="Oscillator Cycles 128K" edc:when="(field &amp; 0x27) == 0x06"/>
                <edc:SFRFieldSemantic edc:cname="OSCILLATOR_CYCLES_256K" edc:desc="Oscillator Cycles 256K" edc:when="(field &amp; 0x27) == 0x07"/>
                <edc:SFRFieldSemantic edc:cname="OSCILLATOR_CYCLES_512K" edc:desc="Oscillator Cycles 512K" edc:when="(field &amp; 0x27) == 0x08"/>
                <edc:SFRFieldSemantic edc:cname="OSCILLATOR_CYCLES_1024K" edc:desc="Oscillator Cycles 1024K" edc:when="(field &amp; 0x27) == 0x09"/>
              </edc:SFRFieldDef>
              <edc:AdjustPoint edc:offset="-3"/>
              <edc:SFRFieldDef edc:cname="WDE" edc:nzwidth="0x1" edc:desc="Watch Dog Enable"/>
              <edc:SFRFieldDef edc:cname="WDCE" edc:nzwidth="0x1" edc:desc="Watchdog Change Enable"/>
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="WDIE" edc:nzwidth="0x1" edc:desc="Watchdog Timeout Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="WDIF" edc:nzwidth="0x1" edc:desc="Watchdog Timeout Interrupt Flag"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="CPU" edc:cname="CLKPR" edc:nzwidth="0x8" edc:access="n---nnnn" edc:impl="0x8F" edc:_addr="0x61">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CPU">
              <edc:SFRFieldDef edc:cname="CLKPS" edc:nzwidth="0x4" edc:desc="Clock Prescaler Select Bits">
                <edc:SFRFieldSemantic edc:cname="DIVISION_FACTOR_1_RC_OSCILLATOR_2" edc:desc="Division factor 1   / RC-Oscillator   2" edc:when="(field &amp; 0xF) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="DIVISION_FACTOR_2_RC_OSCILLATOR_4" edc:desc="Division factor 2   / RC-Oscillator   4" edc:when="(field &amp; 0xF) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="DIVISION_FACTOR_4_RC_OSCILLATOR_8" edc:desc="Division factor 4   / RC-Oscillator   8" edc:when="(field &amp; 0xF) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="DIVISION_FACTOR_8_RC_OSCILLATOR_16" edc:desc="Division factor 8   / RC-Oscillator  16" edc:when="(field &amp; 0xF) == 0x3"/>
                <edc:SFRFieldSemantic edc:cname="DIVISION_FACTOR_16_RC_OSCILLATOR_32" edc:desc="Division factor 16  / RC-Oscillator  32" edc:when="(field &amp; 0xF) == 0x4"/>
                <edc:SFRFieldSemantic edc:cname="DIVISION_FACTOR_32_RC_OSCILLATOR_64" edc:desc="Division factor 32  / RC-Oscillator  64" edc:when="(field &amp; 0xF) == 0x5"/>
                <edc:SFRFieldSemantic edc:cname="DIVISION_FACTOR_64_RC_OSCILLATOR_128" edc:desc="Division factor 64  / RC-Oscillator 128" edc:when="(field &amp; 0xF) == 0x6"/>
                <edc:SFRFieldSemantic edc:cname="DIVISION_FACTOR_128_RC_OSCILLATOR_256" edc:desc="Division factor 128 / RC-Oscillator 256" edc:when="(field &amp; 0xF) == 0x7"/>
                <edc:SFRFieldSemantic edc:cname="DIVISION_FACTOR_256_RC_OSCILLATOR_512" edc:desc="Division factor 256 / RC-Oscillator 512" edc:when="(field &amp; 0xF) == 0x8"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0xF) == 0x9"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0xF) == 0xA"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0xF) == 0xB"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0xF) == 0xC"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0xF) == 0xD"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0xF) == 0xE"/>
                <edc:SFRFieldSemantic edc:cname="DIVISION_FACTOR_1_ONLY_PERMITTED_FOR_RC_OSCILLATOR_FLASH_AND_EEPROM_PROGRAMMING_IS_NOT_ALLOWED" edc:desc="Division factor 1 only permitted for RC-Oscillator. Flash and EEPROM programming is not allowed." edc:when="(field &amp; 0xF) == 0xF"/>
              </edc:SFRFieldDef>
              <edc:AdjustPoint edc:offset="0x3"/>
              <edc:SFRFieldDef edc:cname="CLKPCE" edc:nzwidth="0x1" edc:desc="Clock Prescaler Change Enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0x62"/>
        <edc:SFRDef ltx:memberofperipheral="CPU" edc:cname="PRR2" edc:nzwidth="0x8" edc:access="----nnnn" edc:impl="0xF" edc:_addr="0x63">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CPU">
              <edc:SFRFieldDef edc:cname="PRRAM0" edc:nzwidth="0x1" edc:desc="Power Reduction SRAM0"/>
              <edc:SFRFieldDef edc:cname="PRRAM1" edc:nzwidth="0x1" edc:desc="Power Reduction SRAM1"/>
              <edc:SFRFieldDef edc:cname="PRRAM2" edc:nzwidth="0x1" edc:desc="Power Reduction SRAM2"/>
              <edc:SFRFieldDef edc:cname="PRRAM3" edc:nzwidth="0x1" edc:desc="Power Reduction SRAM3"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="CPU" edc:cname="PRR0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x64">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CPU">
              <edc:SFRFieldDef edc:cname="PRADC" edc:nzwidth="0x1" edc:desc="Power Reduction ADC"/>
              <edc:SFRFieldDef edc:cname="PRUSART0" edc:nzwidth="0x1" edc:desc="Power Reduction USART"/>
              <edc:SFRFieldDef edc:cname="PRSPI" edc:nzwidth="0x1" edc:desc="Power Reduction Serial Peripheral Interface"/>
              <edc:SFRFieldDef edc:cname="PRTIM1" edc:nzwidth="0x1" edc:desc="Power Reduction Timer/Counter1"/>
              <edc:SFRFieldDef edc:cname="PRPGA" edc:nzwidth="0x1" edc:desc="Power Reduction PGA"/>
              <edc:SFRFieldDef edc:cname="PRTIM0" edc:nzwidth="0x1" edc:desc="Power Reduction Timer/Counter0"/>
              <edc:SFRFieldDef edc:cname="PRTIM2" edc:nzwidth="0x1" edc:desc="Power Reduction Timer/Counter2"/>
              <edc:SFRFieldDef edc:cname="PRTWI" edc:nzwidth="0x1" edc:desc="Power Reduction TWI"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="CPU" edc:cname="PRR1" edc:nzwidth="0x8" edc:access="nnnnn--n" edc:impl="0xF9" edc:_addr="0x65">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CPU">
              <edc:SFRFieldDef edc:cname="PRUSART1" edc:nzwidth="0x1" edc:desc="Power Reduction USART1"/>
              <edc:AdjustPoint edc:offset="0x2"/>
              <edc:SFRFieldDef edc:cname="PRTIM3" edc:nzwidth="0x1" edc:desc="Power Reduction Timer/Counter3"/>
              <edc:SFRFieldDef edc:cname="PRTIM4" edc:nzwidth="0x1" edc:desc="Power Reduction Timer/Counter4"/>
              <edc:SFRFieldDef edc:cname="PRTIM5" edc:nzwidth="0x1" edc:desc="Power Reduction Timer/Counter5"/>
              <edc:SFRFieldDef edc:cname="PRTRX24" edc:nzwidth="0x1" edc:desc="Power Reduction Transceiver"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x1" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="CPU" edc:cname="OSCCAL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x66">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CPU">
              <edc:SFRFieldDef edc:cname="OSCCAL" edc:nzwidth="0x8" edc:desc="Oscillator Calibration "/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="FLASH" edc:cname="BGCR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x67">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FLASH">
              <edc:SFRFieldDef edc:cname="BGCAL" edc:nzwidth="0x3" edc:desc="Coarse Calibration Bits">
                <edc:SFRFieldSemantic edc:cname="CENTER_VALUE" edc:desc="Center value" edc:when="(field &amp; 0x7) == 4"/>
                <edc:SFRFieldSemantic edc:cname="VOLTAGE_STEP_UP" edc:desc="Voltage step up" edc:when="(field &amp; 0x7) == 3"/>
                <edc:SFRFieldSemantic edc:cname="VOLTAGE_STEP_DOWN" edc:desc="Voltage step down" edc:when="(field &amp; 0x7) == 5"/>
                <edc:SFRFieldSemantic edc:cname="SETTING_FOR_HIGHEST_VOLTAGE" edc:desc="Setting for highest voltage" edc:when="(field &amp; 0x7) == 0"/>
                <edc:SFRFieldSemantic edc:cname="SETTING_FOR_LOWEST_VOLTAGE" edc:desc="Setting for lowest voltage" edc:when="(field &amp; 0x7) == 7"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="BGCAL_FINE" edc:nzwidth="0x4" edc:desc="Fine Calibration Bits">
                <edc:SFRFieldSemantic edc:cname="CENTER_VALUE" edc:desc="Center value" edc:when="(field &amp; 0xF) == 0"/>
                <edc:SFRFieldSemantic edc:cname="VOLTAGE_STEP_UP" edc:desc="Voltage step up" edc:when="(field &amp; 0xF) == 1"/>
                <edc:SFRFieldSemantic edc:cname="VOLTAGE_STEP_DOWN" edc:desc="Voltage step down" edc:when="(field &amp; 0xF) == 8"/>
                <edc:SFRFieldSemantic edc:cname="SETTING_FOR_HIGHEST_VOLTAGE" edc:desc="Setting for highest voltage" edc:when="(field &amp; 0xF) == 7"/>
                <edc:SFRFieldSemantic edc:cname="SETTING_FOR_LOWEST_VOLTAGE" edc:desc="Setting for lowest voltage" edc:when="(field &amp; 0xF) == 15"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x1" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="EXINT" edc:cname="PCICR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x68">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EXINT">
              <edc:SFRFieldDef edc:cname="PCIE" edc:nzwidth="0x3" edc:desc="Pin Change Interrupt Enables"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x5" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="EXINT" edc:cname="EICRA" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x69">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EXINT">
              <edc:SFRFieldDef edc:cname="ISC0" edc:nzwidth="0x2" edc:desc="External Interrupt 0 Sense Control Bit">
                <edc:SFRFieldSemantic edc:cname="THE_LOW_LEVEL_OF_INTN_GENERATES_AN_INTERRUPT_REQUEST" edc:desc="The low level of INTn generates an interrupt request." edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="ANY_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="Any edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="THE_FALLING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The falling edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="THE_RISING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The rising edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="ISC1" edc:nzwidth="0x2" edc:desc="External Interrupt 1 Sense Control Bit">
                <edc:SFRFieldSemantic edc:cname="THE_LOW_LEVEL_OF_INTN_GENERATES_AN_INTERRUPT_REQUEST" edc:desc="The low level of INTn generates an interrupt request." edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="ANY_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="Any edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="THE_FALLING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The falling edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="THE_RISING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The rising edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="ISC2" edc:nzwidth="0x2" edc:desc="External Interrupt 2 Sense Control Bit">
                <edc:SFRFieldSemantic edc:cname="THE_LOW_LEVEL_OF_INTN_GENERATES_AN_INTERRUPT_REQUEST" edc:desc="The low level of INTn generates an interrupt request." edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="ANY_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="Any edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="THE_FALLING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The falling edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="THE_RISING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The rising edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="ISC3" edc:nzwidth="0x2" edc:desc="External Interrupt 3 Sense Control Bit">
                <edc:SFRFieldSemantic edc:cname="THE_LOW_LEVEL_OF_INTN_GENERATES_AN_INTERRUPT_REQUEST" edc:desc="The low level of INTn generates an interrupt request." edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="ANY_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="Any edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="THE_FALLING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The falling edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="THE_RISING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The rising edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="EXINT" edc:cname="EICRB" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x6A">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EXINT">
              <edc:SFRFieldDef edc:cname="ISC4" edc:nzwidth="0x2" edc:desc="External Interrupt 4 Sense Control Bit">
                <edc:SFRFieldSemantic edc:cname="THE_LOW_LEVEL_OF_INTN_GENERATES_AN_INTERRUPT_REQUEST" edc:desc="The low level of INTn generates an interrupt request." edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="ANY_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="Any edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="THE_FALLING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The falling edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="THE_RISING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The rising edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="ISC5" edc:nzwidth="0x2" edc:desc="External Interrupt 5 Sense Control Bit">
                <edc:SFRFieldSemantic edc:cname="THE_LOW_LEVEL_OF_INTN_GENERATES_AN_INTERRUPT_REQUEST" edc:desc="The low level of INTn generates an interrupt request." edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="ANY_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="Any edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="THE_FALLING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The falling edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="THE_RISING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The rising edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="ISC6" edc:nzwidth="0x2" edc:desc="External Interrupt 6 Sense Control Bit">
                <edc:SFRFieldSemantic edc:cname="THE_LOW_LEVEL_OF_INTN_GENERATES_AN_INTERRUPT_REQUEST" edc:desc="The low level of INTn generates an interrupt request." edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="ANY_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="Any edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="THE_FALLING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The falling edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="THE_RISING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The rising edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="ISC7" edc:nzwidth="0x2" edc:desc="External Interrupt 7 Sense Control Bit">
                <edc:SFRFieldSemantic edc:cname="THE_LOW_LEVEL_OF_INTN_GENERATES_AN_INTERRUPT_REQUEST" edc:desc="The low level of INTn generates an interrupt request." edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="ANY_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="Any edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="THE_FALLING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The falling edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="THE_RISING_EDGE_OF_INTN_GENERATES_ASYNCHRONOUSLY_AN_INTERRUPT_REQUEST" edc:desc="The rising edge of INTn generates asynchronously an interrupt request." edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="EXINT" edc:cname="PCMSK0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x6B">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EXINT">
              <edc:SFRFieldDef edc:cname="PCINT" edc:nzwidth="0x8" edc:desc="Pin Change Enable Mask"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="EXINT" edc:cname="PCMSK1" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x6C">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EXINT">
              <edc:SFRFieldDef edc:cname="PCINT" edc:nzwidth="0x8" edc:desc="Pin Change Enable Mask"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="EXINT" edc:cname="PCMSK2" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x6D">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EXINT">
              <edc:SFRFieldDef edc:cname="PCINT" edc:nzwidth="0x8" edc:desc="Pin Change Enable Mask"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC0" edc:cname="TIMSK0" edc:nzwidth="0x8" edc:access="-----nnn" edc:impl="0x7" edc:_addr="0x6E">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC0">
              <edc:SFRFieldDef edc:cname="TOIE0" edc:nzwidth="0x1" edc:desc="Timer/Counter0 Overflow Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE0A" edc:nzwidth="0x1" edc:desc="Timer/Counter0 Output Compare Match A Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE0B" edc:nzwidth="0x1" edc:desc="Timer/Counter0 Output Compare Match B Interrupt Enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC1" edc:cname="TIMSK1" edc:nzwidth="0x8" edc:access="--n-nnnn" edc:impl="0x2F" edc:_addr="0x6F">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC1">
              <edc:SFRFieldDef edc:cname="TOIE1" edc:nzwidth="0x1" edc:desc="Timer/Counter1 Overflow Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE1A" edc:nzwidth="0x1" edc:desc="Timer/Counter1 Output Compare A Match Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE1B" edc:nzwidth="0x1" edc:desc="Timer/Counter1 Output Compare B Match Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE1C" edc:nzwidth="0x1" edc:desc="Timer/Counter1 Output Compare C Match Interrupt Enable"/>
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="ICIE1" edc:nzwidth="0x1" edc:desc="Timer/Counter1 Input Capture Interrupt Enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC2" edc:cname="TIMSK2" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x70">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC2">
              <edc:SFRFieldDef edc:cname="TOIE2" edc:nzwidth="0x1" edc:desc="Timer/Counter2 Overflow Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE2A" edc:nzwidth="0x1" edc:desc="Timer/Counter2 Output Compare Match A Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE2B" edc:nzwidth="0x1" edc:desc="Timer/Counter2 Output Compare Match B Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x5" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC3" edc:cname="TIMSK3" edc:nzwidth="0x8" edc:access="--n-nnnn" edc:impl="0x2F" edc:_addr="0x71">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC3">
              <edc:SFRFieldDef edc:cname="TOIE3" edc:nzwidth="0x1" edc:desc="Timer/Counter3 Overflow Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE3A" edc:nzwidth="0x1" edc:desc="Timer/Counter3 Output Compare A Match Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE3B" edc:nzwidth="0x1" edc:desc="Timer/Counter3 Output Compare B Match Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE3C" edc:nzwidth="0x1" edc:desc="Timer/Counter3 Output Compare C Match Interrupt Enable"/>
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="ICIE3" edc:nzwidth="0x1" edc:desc="Timer/Counter3 Input Capture Interrupt Enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC4" edc:cname="TIMSK4" edc:nzwidth="0x8" edc:access="--n-nnnn" edc:impl="0x2F" edc:_addr="0x72">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC4">
              <edc:SFRFieldDef edc:cname="TOIE4" edc:nzwidth="0x1" edc:desc="Timer/Counter4 Overflow Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE4A" edc:nzwidth="0x1" edc:desc="Timer/Counter4 Output Compare A Match Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE4B" edc:nzwidth="0x1" edc:desc="Timer/Counter4 Output Compare B Match Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE4C" edc:nzwidth="0x1" edc:desc="Timer/Counter4 Output Compare C Match Interrupt Enable"/>
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="ICIE4" edc:nzwidth="0x1" edc:desc="Timer/Counter4 Input Capture Interrupt Enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC5" edc:cname="TIMSK5" edc:nzwidth="0x8" edc:access="--n-nnnn" edc:impl="0x2F" edc:_addr="0x73">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC5">
              <edc:SFRFieldDef edc:cname="TOIE5" edc:nzwidth="0x1" edc:desc="Timer/Counter5 Overflow Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE5A" edc:nzwidth="0x1" edc:desc="Timer/Counter5 Output Compare A Match Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE5B" edc:nzwidth="0x1" edc:desc="Timer/Counter5 Output Compare B Match Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="OCIE5C" edc:nzwidth="0x1" edc:desc="Timer/Counter5 Output Compare C Match Interrupt Enable"/>
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="ICIE5" edc:nzwidth="0x1" edc:desc="Timer/Counter5 Input Capture Interrupt Enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0x74"/>
        <edc:SFRDef ltx:memberofperipheral="FLASH" edc:cname="NEMCR" edc:nzwidth="0x8" edc:access="-nnn----" edc:impl="0x70" edc:_addr="0x75">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FLASH">
              <edc:AdjustPoint edc:offset="0x4"/>
              <edc:SFRFieldDef edc:cname="AEAM" edc:nzwidth="0x2" edc:desc="Address for Extended Address Mode of Extra Rows">
                <edc:SFRFieldSemantic edc:cname="FACTORY_ROW" edc:desc="Factory Row" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="USER_ROW_1" edc:desc="User Row 1" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="USER_ROW_2" edc:desc="User Row 2" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="USER_ROW_3" edc:desc="User Row 3" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="ENEAM" edc:nzwidth="0x1" edc:desc="Enable Extended Address Mode for Extra Rows"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0x76"/>
        <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="ADCSRC" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x77">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="ADC">
              <edc:SFRFieldDef edc:cname="ADSUT" edc:nzwidth="0x5" edc:desc="ADC Start-up Time">
                <edc:SFRFieldSemantic edc:cname="3_ADC_CLOCK_CYCLES" edc:desc="3 ADC clock cycles" edc:when="(field &amp; 0x1F) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="7_ADC_CLOCK_CYCLES" edc:desc="7 ADC clock cycles" edc:when="(field &amp; 0x1F) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="11_ADC_CLOCK_CYCLES" edc:desc="11 ADC clock cycles" edc:when="(field &amp; 0x1F) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="15_ADC_CLOCK_CYCLES" edc:desc="15 ADC clock cycles" edc:when="(field &amp; 0x1F) == 0x03"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="..." edc:when="(field &amp; 0x1F) == 0x04"/>
                <edc:SFRFieldSemantic edc:cname="251_ADC_CLOCK_CYCLES" edc:desc="251 ADC clock cycles" edc:when="(field &amp; 0x1F) == 0x3E"/>
                <edc:SFRFieldSemantic edc:cname="255_ADC_CLOCK_CYCLES" edc:desc="255 ADC clock cycles" edc:when="(field &amp; 0x1F) == 0x3F"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="Res0" edc:nzwidth="0x1" edc:desc="Reserved"/>
              <edc:SFRFieldDef edc:cname="ADTHT" edc:nzwidth="0x2" edc:desc="ADC Track-and-Hold Time">
                <edc:SFRFieldSemantic edc:cname="SINGLE_ENDED_1_DIFFERENTIAL_3_ADC_CLOCK_CYCLES" edc:desc="Single ended: 1, differential 3 ADC clock cycles" edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="SINGLE_ENDED_2_DIFFERENTIAL_5_ADC_CLOCK_CYCLES" edc:desc="Single ended: 2, differential 5 ADC clock cycles" edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="SINGLE_ENDED_3_DIFFERENTIAL_7_ADC_CLOCK_CYCLES" edc:desc="Single ended: 3, differential 7 ADC clock cycles" edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="SINGLE_ENDED_4_DIFFERENTIAL_9_ADC_CLOCK_CYCLES" edc:desc="Single ended: 4, differential 9 ADC clock cycles" edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="ADC" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x78"/>
        <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="ADCSRA" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x7A">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="ADC">
              <edc:SFRFieldDef edc:cname="ADPS" edc:nzwidth="0x3" edc:desc="ADC  Prescaler Select Bits">
                <edc:SFRFieldSemantic edc:cname="2" edc:desc="2" edc:when="(field &amp; 0x7) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="2" edc:desc="2" edc:when="(field &amp; 0x7) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="4" edc:desc="4" edc:when="(field &amp; 0x7) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="8" edc:desc="8" edc:when="(field &amp; 0x7) == 0x03"/>
                <edc:SFRFieldSemantic edc:cname="16" edc:desc="16" edc:when="(field &amp; 0x7) == 0x04"/>
                <edc:SFRFieldSemantic edc:cname="32" edc:desc="32" edc:when="(field &amp; 0x7) == 0x05"/>
                <edc:SFRFieldSemantic edc:cname="64" edc:desc="64" edc:when="(field &amp; 0x7) == 0x06"/>
                <edc:SFRFieldSemantic edc:cname="128" edc:desc="128" edc:when="(field &amp; 0x7) == 0x07"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="ADIE" edc:nzwidth="0x1" edc:desc="ADC Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="ADIF" edc:nzwidth="0x1" edc:desc="ADC Interrupt Flag"/>
              <edc:SFRFieldDef edc:cname="ADATE" edc:nzwidth="0x1" edc:desc="ADC Auto Trigger Enable"/>
              <edc:SFRFieldDef edc:cname="ADSC" edc:nzwidth="0x1" edc:desc="ADC Start Conversion"/>
              <edc:SFRFieldDef edc:cname="ADEN" edc:nzwidth="0x1" edc:desc="ADC Enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="AC ADC" edc:cname="ADCSRB" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x7B">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="AC">
              <edc:AdjustPoint edc:offset="0x6"/>
              <edc:SFRFieldDef edc:cname="ACME" edc:nzwidth="0x1" edc:desc="Analog Comparator Multiplexer Enable"/>
            </edc:SFRMode>
            <edc:SFRMode edc:id="DS.1" ltx:memberofperipheral="ADC">
              <edc:SFRFieldDef edc:cname="ADTS" edc:nzwidth="0x3" edc:desc="ADC Auto Trigger Source">
                <edc:SFRFieldSemantic edc:cname="FREE_RUNNING_MODE" edc:desc="Free Running mode" edc:when="(field &amp; 0x7) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="ANALOG_COMPARATOR" edc:desc="Analog Comparator" edc:when="(field &amp; 0x7) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="EXTERNAL_INTERRUPT_REQUEST_0" edc:desc="External Interrupt Request 0" edc:when="(field &amp; 0x7) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="TIMER_COUNTER0_COMPARE_MATCH_A" edc:desc="Timer/Counter0 Compare Match A" edc:when="(field &amp; 0x7) == 0x03"/>
                <edc:SFRFieldSemantic edc:cname="TIMER_COUNTER0_OVERFLOW" edc:desc="Timer/Counter0 Overflow" edc:when="(field &amp; 0x7) == 0x04"/>
                <edc:SFRFieldSemantic edc:cname="TIMER_COUNTER1_COMPARE_MATCH_B" edc:desc="Timer/Counter1 Compare Match B" edc:when="(field &amp; 0x7) == 0x05"/>
                <edc:SFRFieldSemantic edc:cname="TIMER_COUNTER1_OVERFLOW" edc:desc="Timer/Counter1 Overflow" edc:when="(field &amp; 0x7) == 0x06"/>
                <edc:SFRFieldSemantic edc:cname="TIMER_COUNTER1_CAPTURE_EVENT" edc:desc="Timer/Counter1 Capture Event" edc:when="(field &amp; 0x7) == 0x07"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="MUX5" edc:nzwidth="0x1" edc:desc="Analog Channel and Gain Selection Bits"/>
              <edc:SFRFieldDef edc:cname="ACCH" edc:nzwidth="0x1" edc:desc="Analog Channel Change"/>
              <edc:SFRFieldDef edc:cname="REFOK" edc:nzwidth="0x1" edc:desc="Reference Voltage OK"/>
              <edc:SFRFieldDef edc:cname="ACME" edc:nzwidth="0x1" edc:desc="Analog Comparator Multiplexer Enable"/>
              <edc:SFRFieldDef edc:cname="AVDDOK" edc:nzwidth="0x1" edc:desc="AVDD Supply Voltage OK"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="ADMUX" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x7C">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="ADC">
              <edc:SFRFieldDef edc:cname="MUX" edc:nzwidth="0x5" edc:desc="Analog Channel and Gain Selection Bits"/>
              <edc:SFRFieldDef edc:cname="ADLAR" edc:nzwidth="0x1" edc:desc="ADC Left Adjust Result"/>
              <edc:SFRFieldDef edc:cname="REFS" edc:nzwidth="0x2" edc:desc="Reference Selection Bits">
                <edc:SFRFieldSemantic edc:cname="AREF_INTERNAL_REFERENCE_VOLTAGE_GENERATION_TURNED_OFF" edc:desc="AREF, Internal reference voltage generation turned off" edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="AVDD_WITH_EXTERNAL_CAPACITOR_AT_AREF_PIN" edc:desc="AVDD with external capacitor at AREF pin" edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="INTERNAL_1_5V_VOLTAGE_REFERENCE_NO_EXTERNAL_CAPACITOR_AT_AREF_PIN" edc:desc="Internal 1.5V Voltage Reference (no external capacitor at AREF pin)" edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="INTERNAL_1_6V_VOLTAGE_REFERENCE_NO_EXTERNAL_CAPACITOR_AT_AREF_PIN" edc:desc="Internal 1.6V Voltage Reference (no external capacitor at AREF pin)" edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="DIDR2" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x7D">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="ADC">
              <edc:SFRFieldDef edc:cname="ADC8D" edc:nzwidth="0x1" edc:desc="Reserved Bits"/>
              <edc:SFRFieldDef edc:cname="ADC9D" edc:nzwidth="0x1" edc:desc="Reserved Bits"/>
              <edc:SFRFieldDef edc:cname="ADC10D" edc:nzwidth="0x1" edc:desc="Reserved Bits"/>
              <edc:SFRFieldDef edc:cname="ADC11D" edc:nzwidth="0x1" edc:desc="Reserved Bits"/>
              <edc:SFRFieldDef edc:cname="ADC12D" edc:nzwidth="0x1" edc:desc="Reserved Bits"/>
              <edc:SFRFieldDef edc:cname="ADC13D" edc:nzwidth="0x1" edc:desc="Reserved Bits"/>
              <edc:SFRFieldDef edc:cname="ADC14D" edc:nzwidth="0x1" edc:desc="Reserved Bits"/>
              <edc:SFRFieldDef edc:cname="ADC15D" edc:nzwidth="0x1" edc:desc="Reserved Bits"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="DIDR0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x7E">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="ADC">
              <edc:SFRFieldDef edc:cname="ADC0D" edc:nzwidth="0x1" edc:desc="Disable ADC7:0 Digital Input"/>
              <edc:SFRFieldDef edc:cname="ADC1D" edc:nzwidth="0x1" edc:desc="Disable ADC7:0 Digital Input"/>
              <edc:SFRFieldDef edc:cname="ADC2D" edc:nzwidth="0x1" edc:desc="Disable ADC7:0 Digital Input"/>
              <edc:SFRFieldDef edc:cname="ADC3D" edc:nzwidth="0x1" edc:desc="Disable ADC7:0 Digital Input"/>
              <edc:SFRFieldDef edc:cname="ADC4D" edc:nzwidth="0x1" edc:desc="Disable ADC7:0 Digital Input"/>
              <edc:SFRFieldDef edc:cname="ADC5D" edc:nzwidth="0x1" edc:desc="Disable ADC7:0 Digital Input"/>
              <edc:SFRFieldDef edc:cname="ADC6D" edc:nzwidth="0x1" edc:desc="Disable ADC7:0 Digital Input"/>
              <edc:SFRFieldDef edc:cname="ADC7D" edc:nzwidth="0x1" edc:desc="Disable ADC7:0 Digital Input"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="AC" edc:cname="DIDR1" edc:nzwidth="0x8" edc:access="------nn" edc:impl="0x3" edc:_addr="0x7F">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="AC">
              <edc:SFRFieldDef edc:cname="AIN0D" edc:nzwidth="0x1" edc:desc="AIN0 Digital Input Disable"/>
              <edc:SFRFieldDef edc:cname="AIN1D" edc:nzwidth="0x1" edc:desc="AIN1 Digital Input Disable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC1" edc:cname="TCCR1A" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x80">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC1">
              <edc:SFRFieldDef edc:cname="WGM1" edc:nzwidth="0x2" edc:desc="Waveform Generation Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_MODE_OF_OPERATION" edc:desc="Normal mode of operation" edc:when="(field &amp; 0x3) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_8_BIT" edc:desc="PWM, phase correct, 8-bit" edc:when="(field &amp; 0x3) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_9_BIT" edc:desc="PWM, phase correct, 9-bit" edc:when="(field &amp; 0x3) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_10_BIT" edc:desc="PWM, phase correct, 10-bit" edc:when="(field &amp; 0x3) == 0x3"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x4"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_8_BIT" edc:desc="Fast PWM, 8-bit" edc:when="(field &amp; 0x3) == 0x5"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_9_BIT" edc:desc="Fast PWM, 9-bit" edc:when="(field &amp; 0x3) == 0x6"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_10_BIT" edc:desc="Fast PWM, 10-bit" edc:when="(field &amp; 0x3) == 0x7"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_ICRN" edc:desc="PWM, Phase and frequency correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0x8"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase and frequency correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x9"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_ICRN" edc:desc="PWM, Phase correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xA"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xB"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xC"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0xD"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_ICRN" edc:desc="Fast PWM, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xE"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_OCRNA" edc:desc="Fast PWM, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xF"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM1C" edc:nzwidth="0x2" edc:desc="Compare Output Mode for Channel C">
                <edc:SFRFieldSemantic edc:cname="NORMAL_PORT_OPERATION_OCNA_OCNB_OCNC_DISCONNECTED" edc:desc="Normal port operation, OCnA/OCnB/OCnC disconnected." edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TOGGLE_OCNA_OCNB_OCNC_ON_COMPARE_MATCH" edc:desc="Toggle OCnA/OCnB/OCnC on Compare Match." edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="CLEAR_OCNA_OCNB_OCNC_ON_COMPARE_MATCH_SET_OUTPUT_TO_LOW_LEVEL" edc:desc="Clear OCnA/OCnB/OCnC on Compare Match (set output to low level)." edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="SET_OCNA_OCNB_OCNC_ON_COMPARE_MATCH_SET_OUTPUT_TO_HIGH_LEVEL" edc:desc="Set OCnA/OCnB/OCnC on Compare Match (set output to high level)." edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM1B" edc:nzwidth="0x2" edc:desc="Compare Output Mode for Channel B">
                <edc:SFRFieldSemantic edc:cname="NORMAL_PORT_OPERATION_OCNA_OCNB_OCNC_DISCONNECTED" edc:desc="Normal port operation, OCnA/OCnB/OCnC disconnected." edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TOGGLE_OCNA_OCNB_OCNC_ON_COMPARE_MATCH" edc:desc="Toggle OCnA/OCnB/OCnC on Compare Match." edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="CLEAR_OCNA_OCNB_OCNC_ON_COMPARE_MATCH_SET_OUTPUT_TO_LOW_LEVEL" edc:desc="Clear OCnA/OCnB/OCnC on Compare Match (set output to low level)." edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="SET_OCNA_OCNB_OCNC_ON_COMPARE_MATCH_SET_OUTPUT_TO_HIGH_LEVEL" edc:desc="Set OCnA/OCnB/OCnC on Compare Match (set output to high level)." edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM1A" edc:nzwidth="0x2" edc:desc="Compare Output Mode for Channel A">
                <edc:SFRFieldSemantic edc:cname="NORMAL_PORT_OPERATION_OCNA_OCNB_OCNC_DISCONNECTED" edc:desc="Normal port operation, OCnA/OCnB/OCnC disconnected." edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TOGGLE_OCNA_OCNB_OCNC_ON_COMPARE_MATCH" edc:desc="Toggle OCnA/OCnB/OCnC on Compare Match." edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="CLEAR_OCNA_OCNB_OCNC_ON_COMPARE_MATCH_SET_OUTPUT_TO_LOW_LEVEL" edc:desc="Clear OCnA/OCnB/OCnC on Compare Match (set output to low level)." edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="SET_OCNA_OCNB_OCNC_ON_COMPARE_MATCH_SET_OUTPUT_TO_HIGH_LEVEL" edc:desc="Set OCnA/OCnB/OCnC on Compare Match (set output to high level)." edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC1" edc:cname="TCCR1B" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x81">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC1">
              <edc:SFRFieldDef edc:cname="CS1" edc:nzwidth="0x3" edc:desc="Clock Select">
                <edc:SFRFieldSemantic edc:cname="NO_CLOCK_SOURCE_TIMER_COUNTER_STOPPED" edc:desc="No clock source (Timer/Counter stopped)" edc:when="(field &amp; 0x7) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_1_NO_PRESCALING" edc:desc="clk_IO/1 (no prescaling)" edc:when="(field &amp; 0x7) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_8_FROM_PRESCALER" edc:desc="clk_IO/8 (from prescaler)" edc:when="(field &amp; 0x7) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_64_FROM_PRESCALER" edc:desc="clk_IO/64 (from prescaler)" edc:when="(field &amp; 0x7) == 0x03"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_256_FROM_PRESCALER" edc:desc="clk_IO/256 (from prescaler)" edc:when="(field &amp; 0x7) == 0x04"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_1024_FROM_PRESCALER" edc:desc="clk_IO/1024 (from prescaler)" edc:when="(field &amp; 0x7) == 0x05"/>
                <edc:SFRFieldSemantic edc:cname="EXTERNAL_CLOCK_SOURCE_ON_TN_PIN_CLOCK_ON_FALLING_EDGE" edc:desc="External clock source on Tn pin, clock on falling edge" edc:when="(field &amp; 0x7) == 0x06"/>
                <edc:SFRFieldSemantic edc:cname="EXTERNAL_CLOCK_SOURCE_ON_TN_PIN_CLOCK_ON_RISING_EDGE" edc:desc="External clock source on Tn pin, clock on rising edge" edc:when="(field &amp; 0x7) == 0x07"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="WGM1" edc:nzwidth="0x2" edc:desc="Waveform Generation Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_MODE_OF_OPERATION" edc:desc="Normal mode of operation" edc:when="(field &amp; 0x3) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_8_BIT" edc:desc="PWM, phase correct, 8-bit" edc:when="(field &amp; 0x3) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_9_BIT" edc:desc="PWM, phase correct, 9-bit" edc:when="(field &amp; 0x3) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_10_BIT" edc:desc="PWM, phase correct, 10-bit" edc:when="(field &amp; 0x3) == 0x3"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x4"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_8_BIT" edc:desc="Fast PWM, 8-bit" edc:when="(field &amp; 0x3) == 0x5"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_9_BIT" edc:desc="Fast PWM, 9-bit" edc:when="(field &amp; 0x3) == 0x6"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_10_BIT" edc:desc="Fast PWM, 10-bit" edc:when="(field &amp; 0x3) == 0x7"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_ICRN" edc:desc="PWM, Phase and frequency correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0x8"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase and frequency correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x9"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_ICRN" edc:desc="PWM, Phase correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xA"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xB"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xC"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0xD"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_ICRN" edc:desc="Fast PWM, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xE"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_OCRNA" edc:desc="Fast PWM, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xF"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x1" edc:desc="Reserved Bit"/>
              <edc:SFRFieldDef edc:cname="ICES1" edc:nzwidth="0x1" edc:desc="Input Capture 1 Edge Select"/>
              <edc:SFRFieldDef edc:cname="ICNC1" edc:nzwidth="0x1" edc:desc="Input Capture 1 Noise Canceller"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC1" edc:cname="TCCR1C" edc:nzwidth="0x8" edc:access="nnn-----" edc:impl="0xE0" edc:_addr="0x82">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC1">
              <edc:AdjustPoint edc:offset="0x5"/>
              <edc:SFRFieldDef edc:cname="FOC1C" edc:nzwidth="0x1" edc:desc="Force Output Compare for Channel C"/>
              <edc:SFRFieldDef edc:cname="FOC1B" edc:nzwidth="0x1" edc:desc="Force Output Compare for Channel B"/>
              <edc:SFRFieldDef edc:cname="FOC1A" edc:nzwidth="0x1" edc:desc="Force Output Compare for Channel A"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0x83"/>
        <edc:SFRDef ltx:memberofperipheral="TC1" edc:cname="TCNT1" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x84"/>
        <edc:SFRDef ltx:memberofperipheral="TC1" edc:cname="ICR1" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x86"/>
        <edc:SFRDef ltx:memberofperipheral="TC1" edc:cname="OCR1A" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x88"/>
        <edc:SFRDef ltx:memberofperipheral="TC1" edc:cname="OCR1B" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x8A"/>
        <edc:SFRDef ltx:memberofperipheral="TC1" edc:cname="OCR1C" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x8C"/>
        <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x8E"/>
        <edc:SFRDef ltx:memberofperipheral="TC3" edc:cname="TCCR3A" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x90">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC3">
              <edc:SFRFieldDef edc:cname="WGM3" edc:nzwidth="0x2" edc:desc="Waveform Generation Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_MODE_OF_OPERATION" edc:desc="Normal mode of operation" edc:when="(field &amp; 0x3) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_8_BIT" edc:desc="PWM, phase correct, 8-bit" edc:when="(field &amp; 0x3) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_9_BIT" edc:desc="PWM, phase correct, 9-bit" edc:when="(field &amp; 0x3) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_10_BIT" edc:desc="PWM, phase correct, 10-bit" edc:when="(field &amp; 0x3) == 0x3"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x4"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_8_BIT" edc:desc="Fast PWM, 8-bit" edc:when="(field &amp; 0x3) == 0x5"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_9_BIT" edc:desc="Fast PWM, 9-bit" edc:when="(field &amp; 0x3) == 0x6"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_10_BIT" edc:desc="Fast PWM, 10-bit" edc:when="(field &amp; 0x3) == 0x7"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_ICRN" edc:desc="PWM, Phase and frequency correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0x8"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase and frequency correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x9"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_ICRN" edc:desc="PWM, Phase correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xA"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xB"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xC"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0xD"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_ICRN" edc:desc="Fast PWM, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xE"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_OCRNA" edc:desc="Fast PWM, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xF"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM3C" edc:nzwidth="0x2" edc:desc="Compare Output Mode for Channel C">
                <edc:SFRFieldSemantic edc:cname="NORMAL_PORT_OPERATION_OCNA_OCNB_OCNC_DISCONNECTED" edc:desc="Normal port operation, OCnA/OCnB/OCnC disconnected." edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TOGGLE_OCNA_OCNB_OCNC_ON_COMPARE_MATCH" edc:desc="Toggle OCnA/OCnB/OCnC on Compare Match." edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="CLEAR_OCNA_OCNB_OCNC_ON_COMPARE_MATCH_SET_OUTPUT_TO_LOW_LEVEL" edc:desc="Clear OCnA/OCnB/OCnC on Compare Match (set output to low level)." edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="SET_OCNA_OCNB_OCNC_ON_COMPARE_MATCH_SET_OUTPUT_TO_HIGH_LEVEL" edc:desc="Set OCnA/OCnB/OCnC on Compare Match (set output to high level)." edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM3B" edc:nzwidth="0x2" edc:desc="Compare Output Mode for Channel B">
                <edc:SFRFieldSemantic edc:cname="NORMAL_PORT_OPERATION_OCNA_OCNB_OCNC_DISCONNECTED" edc:desc="Normal port operation, OCnA/OCnB/OCnC disconnected." edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TOGGLE_OCNA_OCNB_OCNC_ON_COMPARE_MATCH" edc:desc="Toggle OCnA/OCnB/OCnC on Compare Match." edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="CLEAR_OCNA_OCNB_OCNC_ON_COMPARE_MATCH_SET_OUTPUT_TO_LOW_LEVEL" edc:desc="Clear OCnA/OCnB/OCnC on Compare Match (set output to low level)." edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="SET_OCNA_OCNB_OCNC_ON_COMPARE_MATCH_SET_OUTPUT_TO_HIGH_LEVEL" edc:desc="Set OCnA/OCnB/OCnC on Compare Match (set output to high level)." edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM3A" edc:nzwidth="0x2" edc:desc="Compare Output Mode for Channel A">
                <edc:SFRFieldSemantic edc:cname="NORMAL_PORT_OPERATION_OCNA_OCNB_OCNC_DISCONNECTED" edc:desc="Normal port operation, OCnA/OCnB/OCnC disconnected." edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TOGGLE_OCNA_OCNB_OCNC_ON_COMPARE_MATCH" edc:desc="Toggle OCnA/OCnB/OCnC on Compare Match." edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="CLEAR_OCNA_OCNB_OCNC_ON_COMPARE_MATCH_SET_OUTPUT_TO_LOW_LEVEL" edc:desc="Clear OCnA/OCnB/OCnC on Compare Match (set output to low level)." edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="SET_OCNA_OCNB_OCNC_ON_COMPARE_MATCH_SET_OUTPUT_TO_HIGH_LEVEL" edc:desc="Set OCnA/OCnB/OCnC on Compare Match (set output to high level)." edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC3" edc:cname="TCCR3B" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x91">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC3">
              <edc:SFRFieldDef edc:cname="CS3" edc:nzwidth="0x3" edc:desc="Clock Select">
                <edc:SFRFieldSemantic edc:cname="NO_CLOCK_SOURCE_TIMER_COUNTER_STOPPED" edc:desc="No clock source (Timer/Counter stopped)" edc:when="(field &amp; 0x7) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_1_NO_PRESCALING" edc:desc="clk_IO/1 (no prescaling)" edc:when="(field &amp; 0x7) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_8_FROM_PRESCALER" edc:desc="clk_IO/8 (from prescaler)" edc:when="(field &amp; 0x7) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_64_FROM_PRESCALER" edc:desc="clk_IO/64 (from prescaler)" edc:when="(field &amp; 0x7) == 0x03"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_256_FROM_PRESCALER" edc:desc="clk_IO/256 (from prescaler)" edc:when="(field &amp; 0x7) == 0x04"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_1024_FROM_PRESCALER" edc:desc="clk_IO/1024 (from prescaler)" edc:when="(field &amp; 0x7) == 0x05"/>
                <edc:SFRFieldSemantic edc:cname="EXTERNAL_CLOCK_SOURCE_ON_TN_PIN_CLOCK_ON_FALLING_EDGE" edc:desc="External clock source on Tn pin, clock on falling edge" edc:when="(field &amp; 0x7) == 0x06"/>
                <edc:SFRFieldSemantic edc:cname="EXTERNAL_CLOCK_SOURCE_ON_TN_PIN_CLOCK_ON_RISING_EDGE" edc:desc="External clock source on Tn pin, clock on rising edge" edc:when="(field &amp; 0x7) == 0x07"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="WGM3" edc:nzwidth="0x2" edc:desc="Waveform Generation Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_MODE_OF_OPERATION" edc:desc="Normal mode of operation" edc:when="(field &amp; 0x3) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_8_BIT" edc:desc="PWM, phase correct, 8-bit" edc:when="(field &amp; 0x3) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_9_BIT" edc:desc="PWM, phase correct, 9-bit" edc:when="(field &amp; 0x3) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_10_BIT" edc:desc="PWM, phase correct, 10-bit" edc:when="(field &amp; 0x3) == 0x3"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x4"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_8_BIT" edc:desc="Fast PWM, 8-bit" edc:when="(field &amp; 0x3) == 0x5"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_9_BIT" edc:desc="Fast PWM, 9-bit" edc:when="(field &amp; 0x3) == 0x6"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_10_BIT" edc:desc="Fast PWM, 10-bit" edc:when="(field &amp; 0x3) == 0x7"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_ICRN" edc:desc="PWM, Phase and frequency correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0x8"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase and frequency correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x9"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_ICRN" edc:desc="PWM, Phase correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xA"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xB"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xC"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0xD"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_ICRN" edc:desc="Fast PWM, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xE"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_OCRNA" edc:desc="Fast PWM, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xF"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x1" edc:desc="Reserved Bit"/>
              <edc:SFRFieldDef edc:cname="ICES3" edc:nzwidth="0x1" edc:desc="Input Capture 3 Edge Select"/>
              <edc:SFRFieldDef edc:cname="ICNC3" edc:nzwidth="0x1" edc:desc="Input Capture 3 Noise Canceller"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC3" edc:cname="TCCR3C" edc:nzwidth="0x8" edc:access="nnn-----" edc:impl="0xE0" edc:_addr="0x92">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC3">
              <edc:AdjustPoint edc:offset="0x5"/>
              <edc:SFRFieldDef edc:cname="FOC3C" edc:nzwidth="0x1" edc:desc="Force Output Compare for Channel C"/>
              <edc:SFRFieldDef edc:cname="FOC3B" edc:nzwidth="0x1" edc:desc="Force Output Compare for Channel B"/>
              <edc:SFRFieldDef edc:cname="FOC3A" edc:nzwidth="0x1" edc:desc="Force Output Compare for Channel A"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0x93"/>
        <edc:SFRDef ltx:memberofperipheral="TC3" edc:cname="TCNT3" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x94"/>
        <edc:SFRDef ltx:memberofperipheral="TC3" edc:cname="ICR3" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x96"/>
        <edc:SFRDef ltx:memberofperipheral="TC3" edc:cname="OCR3A" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x98"/>
        <edc:SFRDef ltx:memberofperipheral="TC3" edc:cname="OCR3B" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x9A"/>
        <edc:SFRDef ltx:memberofperipheral="TC3" edc:cname="OCR3C" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x9C"/>
        <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x9E"/>
        <edc:SFRDef ltx:memberofperipheral="TC4" edc:cname="TCCR4A" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xA0">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC4">
              <edc:SFRFieldDef edc:cname="WGM4" edc:nzwidth="0x2" edc:desc="Waveform Generation Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_MODE_OF_OPERATION" edc:desc="Normal mode of operation" edc:when="(field &amp; 0x3) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_8_BIT" edc:desc="PWM, phase correct, 8-bit" edc:when="(field &amp; 0x3) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_9_BIT" edc:desc="PWM, phase correct, 9-bit" edc:when="(field &amp; 0x3) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_10_BIT" edc:desc="PWM, phase correct, 10-bit" edc:when="(field &amp; 0x3) == 0x3"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x4"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_8_BIT" edc:desc="Fast PWM, 8-bit" edc:when="(field &amp; 0x3) == 0x5"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_9_BIT" edc:desc="Fast PWM, 9-bit" edc:when="(field &amp; 0x3) == 0x6"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_10_BIT" edc:desc="Fast PWM, 10-bit" edc:when="(field &amp; 0x3) == 0x7"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_ICRN" edc:desc="PWM, Phase and frequency correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0x8"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase and frequency correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x9"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_ICRN" edc:desc="PWM, Phase correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xA"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xB"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xC"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0xD"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_ICRN" edc:desc="Fast PWM, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xE"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_OCRNA" edc:desc="Fast PWM, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xF"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM4C" edc:nzwidth="0x2" edc:desc="Compare Output Mode for Channel C">
                <edc:SFRFieldSemantic edc:cname="NORMAL_OPERATION" edc:desc="Normal operation" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM4B" edc:nzwidth="0x2" edc:desc="Compare Output Mode for Channel B">
                <edc:SFRFieldSemantic edc:cname="NORMAL_OPERATION" edc:desc="Normal operation" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM4A" edc:nzwidth="0x2" edc:desc="Compare Output Mode for Channel A">
                <edc:SFRFieldSemantic edc:cname="NORMAL_OPERATION" edc:desc="Normal operation" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC4" edc:cname="TCCR4B" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xA1">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC4">
              <edc:SFRFieldDef edc:cname="CS4" edc:nzwidth="0x3" edc:desc="Clock Select">
                <edc:SFRFieldSemantic edc:cname="NO_CLOCK_SOURCE_TIMER_COUNTER_STOPPED" edc:desc="No clock source (Timer/Counter stopped)" edc:when="(field &amp; 0x7) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_1_NO_PRESCALING" edc:desc="clk_IO/1 (no prescaling)" edc:when="(field &amp; 0x7) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_8_FROM_PRESCALER" edc:desc="clk_IO/8 (from prescaler)" edc:when="(field &amp; 0x7) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_64_FROM_PRESCALER" edc:desc="clk_IO/64 (from prescaler)" edc:when="(field &amp; 0x7) == 0x03"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_256_FROM_PRESCALER" edc:desc="clk_IO/256 (from prescaler)" edc:when="(field &amp; 0x7) == 0x04"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_1024_FROM_PRESCALER" edc:desc="clk_IO/1024 (from prescaler)" edc:when="(field &amp; 0x7) == 0x05"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x7) == 0x06"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x7) == 0x07"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="WGM4" edc:nzwidth="0x2" edc:desc="Waveform Generation Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_MODE_OF_OPERATION" edc:desc="Normal mode of operation" edc:when="(field &amp; 0x3) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_8_BIT" edc:desc="PWM, phase correct, 8-bit" edc:when="(field &amp; 0x3) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_9_BIT" edc:desc="PWM, phase correct, 9-bit" edc:when="(field &amp; 0x3) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_10_BIT" edc:desc="PWM, phase correct, 10-bit" edc:when="(field &amp; 0x3) == 0x3"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x4"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_8_BIT" edc:desc="Fast PWM, 8-bit" edc:when="(field &amp; 0x3) == 0x5"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_9_BIT" edc:desc="Fast PWM, 9-bit" edc:when="(field &amp; 0x3) == 0x6"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_10_BIT" edc:desc="Fast PWM, 10-bit" edc:when="(field &amp; 0x3) == 0x7"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_ICRN" edc:desc="PWM, Phase and frequency correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0x8"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase and frequency correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x9"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_ICRN" edc:desc="PWM, Phase correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xA"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xB"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xC"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0xD"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_ICRN" edc:desc="Fast PWM, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xE"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_OCRNA" edc:desc="Fast PWM, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xF"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x1" edc:desc="Reserved Bit"/>
              <edc:SFRFieldDef edc:cname="ICES4" edc:nzwidth="0x1" edc:desc="Input Capture 4 Edge Select"/>
              <edc:SFRFieldDef edc:cname="ICNC4" edc:nzwidth="0x1" edc:desc="Input Capture 4 Noise Canceller"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC4" edc:cname="TCCR4C" edc:nzwidth="0x8" edc:access="nnn-----" edc:impl="0xE0" edc:_addr="0xA2">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC4">
              <edc:AdjustPoint edc:offset="0x5"/>
              <edc:SFRFieldDef edc:cname="FOC4C" edc:nzwidth="0x1" edc:desc="Force Output Compare for Channel C"/>
              <edc:SFRFieldDef edc:cname="FOC4B" edc:nzwidth="0x1" edc:desc="Force Output Compare for Channel B"/>
              <edc:SFRFieldDef edc:cname="FOC4A" edc:nzwidth="0x1" edc:desc="Force Output Compare for Channel A"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0xA3"/>
        <edc:SFRDef ltx:memberofperipheral="TC4" edc:cname="TCNT4" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0xA4"/>
        <edc:SFRDef ltx:memberofperipheral="TC4" edc:cname="ICR4" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0xA6"/>
        <edc:SFRDef ltx:memberofperipheral="TC4" edc:cname="OCR4A" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0xA8"/>
        <edc:SFRDef ltx:memberofperipheral="TC4" edc:cname="OCR4B" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0xAA"/>
        <edc:SFRDef ltx:memberofperipheral="TC4" edc:cname="OCR4C" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0xAC"/>
        <edc:AdjustPoint edc:offset="0x2" edc:_addr="0xAE"/>
        <edc:SFRDef ltx:memberofperipheral="TC2" edc:cname="TCCR2A" edc:nzwidth="0x8" edc:access="nnnn--nn" edc:impl="0xF3" edc:_addr="0xB0">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC2">
              <edc:SFRFieldDef edc:cname="WGM2" edc:nzwidth="0x2" edc:desc="Waveform Generation Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_MODE_OF_OPERATION" edc:desc="Normal mode of operation" edc:when="(field &amp; 0x3) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_0XFF" edc:desc="PWM, phase correct, TOP=0xFF" edc:when="(field &amp; 0x3) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRA" edc:desc="CTC, TOP = OCRA" edc:when="(field &amp; 0x3) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_0XFF" edc:desc="Fast PWM, TOP=0xFF" edc:when="(field &amp; 0x3) == 0x3"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0x4"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_OCRA" edc:desc="PWM, Phase correct, TOP = OCRA" edc:when="(field &amp; 0x3) == 0x5"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0x6"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_OCRA" edc:desc="Fast PWM, TOP=OCRA" edc:when="(field &amp; 0x3) == 0x7"/>
              </edc:SFRFieldDef>
              <edc:AdjustPoint edc:offset="0x2"/>
              <edc:SFRFieldDef edc:cname="COM2B" edc:nzwidth="0x2" edc:desc="Compare Match Output B Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_PORT_OPERATION_OC2B_DISCONNECTED" edc:desc="Normal port operation, OC2B disconnected" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TOGGLE_OC2B_ON_COMPARE_MATCH" edc:desc="Toggle OC2B on Compare Match" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="CLEAR_OC2B_ON_COMPARE_MATCH" edc:desc="Clear OC2B on Compare Match" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="SET_OC2B_ON_COMPARE_MATCH" edc:desc="Set OC2B on Compare Match" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM2A" edc:nzwidth="0x2" edc:desc="Compare Match Output A Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_PORT_OPERATION_OC2A_DISCONNECTED" edc:desc="Normal port operation, OC2A disconnected" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TOGGLE_OC2A_ON_COMPARE_MATCH" edc:desc="Toggle OC2A on Compare Match" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="CLEAR_OC2A_ON_COMPARE_MATCH" edc:desc="Clear OC2A on Compare Match" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="SET_OC2A_ON_COMPARE_MATCH" edc:desc="Set OC2A on Compare Match" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC2" edc:cname="TCCR2B" edc:nzwidth="0x8" edc:access="nn--nnnn" edc:impl="0xCF" edc:_addr="0xB1">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC2">
              <edc:SFRFieldDef edc:cname="CS2" edc:nzwidth="0x3" edc:desc="Clock Select">
                <edc:SFRFieldSemantic edc:cname="NO_CLOCK_SOURCE_TIMER_COUNTER2_STOPPED" edc:desc="No clock source (Timer/Counter2 stopped)" edc:when="(field &amp; 0x7) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="CLK_T2S_1_NO_PRESCALING" edc:desc="clk_T2S/1 (no prescaling)" edc:when="(field &amp; 0x7) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="CLK_T2S_8_FROM_PRESCALER" edc:desc="clk_T2S/8 (from prescaler)" edc:when="(field &amp; 0x7) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="CLK_T2S_32_FROM_PRESCALER" edc:desc="clk_T2S/32 (from prescaler)" edc:when="(field &amp; 0x7) == 0x03"/>
                <edc:SFRFieldSemantic edc:cname="CLK_T2S_64_FROM_PRESCALER" edc:desc="clk_T2S/64 (from prescaler)" edc:when="(field &amp; 0x7) == 0x04"/>
                <edc:SFRFieldSemantic edc:cname="CLK_T2S_128_FROM_PRESCALER" edc:desc="clk_T2S/128 (from prescaler)" edc:when="(field &amp; 0x7) == 0x05"/>
                <edc:SFRFieldSemantic edc:cname="CLK_T2S_256_FROM_PRESCALER" edc:desc="clk_T2S/256 (from prescaler)" edc:when="(field &amp; 0x7) == 0x06"/>
                <edc:SFRFieldSemantic edc:cname="CLK_T2S_1024_FROM_PRESCALER" edc:desc="clk_T2S/1024 (from prescaler)" edc:when="(field &amp; 0x7) == 0x07"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="WGM22" edc:nzwidth="0x1" edc:desc="Waveform Generation Mode"/>
              <edc:AdjustPoint edc:offset="0x2"/>
              <edc:SFRFieldDef edc:cname="FOC2B" edc:nzwidth="0x1" edc:desc="Force Output Compare B"/>
              <edc:SFRFieldDef edc:cname="FOC2A" edc:nzwidth="0x1" edc:desc="Force Output Compare A"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC2" edc:cname="TCNT2" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xB2"/>
        <edc:SFRDef ltx:memberofperipheral="TC2" edc:cname="OCR2A" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xB3"/>
        <edc:SFRDef ltx:memberofperipheral="TC2" edc:cname="OCR2B" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xB4"/>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0xB5"/>
        <edc:SFRDef ltx:memberofperipheral="TC2" edc:cname="ASSR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xB6">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC2">
              <edc:SFRFieldDef edc:cname="TCR2BUB" edc:nzwidth="0x1" edc:desc="Timer/Counter2 Control Register B Update Busy"/>
              <edc:SFRFieldDef edc:cname="TCR2AUB" edc:nzwidth="0x1" edc:desc="Timer/Counter2 Control Register A Update Busy"/>
              <edc:SFRFieldDef edc:cname="OCR2BUB" edc:nzwidth="0x1" edc:desc="Timer/Counter2 Output Compare Register B Update Busy"/>
              <edc:SFRFieldDef edc:cname="OCR2AUB" edc:nzwidth="0x1" edc:desc="Timer/Counter2 Output Compare Register A Update Busy"/>
              <edc:SFRFieldDef edc:cname="TCN2UB" edc:nzwidth="0x1" edc:desc="Timer/Counter2 Update Busy"/>
              <edc:SFRFieldDef edc:cname="AS2" edc:nzwidth="0x1" edc:desc="Timer/Counter2 Asynchronous Mode"/>
              <edc:SFRFieldDef edc:cname="EXCLK" edc:nzwidth="0x1" edc:desc="Enable External Clock Input"/>
              <edc:SFRFieldDef edc:cname="EXCLKAMR" edc:nzwidth="0x1" edc:desc="Enable External Clock Input for AMR"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0xB7"/>
        <edc:SFRDef ltx:memberofperipheral="TWI" edc:cname="TWBR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xB8"/>
        <edc:SFRDef ltx:memberofperipheral="TWI" edc:cname="TWSR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xB9">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TWI">
              <edc:SFRFieldDef edc:cname="TWPS" edc:nzwidth="0x2" edc:desc="TWI Prescaler Bits">
                <edc:SFRFieldSemantic edc:cname="1" edc:desc="1" edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="4" edc:desc="4" edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="16" edc:desc="16" edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="64" edc:desc="64" edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x1" edc:desc="Reserved Bit"/>
              <edc:SFRFieldDef edc:cname="TWS" edc:nzwidth="0x5" edc:desc="TWI Status">
                <edc:SFRFieldSemantic edc:cname="BUS_ERROR_DUE_TO_ILLEGAL_START_OR_STOP_CONDITION" edc:desc="Bus error due to illegal START or STOP condition." edc:when="(field &amp; 0x1F) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="A_START_CONDITION_HAS_BEEN_TRANSMITTED" edc:desc="A START condition has been transmitted." edc:when="(field &amp; 0x1F) == 0x08"/>
                <edc:SFRFieldSemantic edc:cname="A_REPEATED_START_CONDITION_HAS_BEEN_TRANSMITTED" edc:desc="A repeated START condition has been transmitted." edc:when="(field &amp; 0x1F) == 0x10"/>
                <edc:SFRFieldSemantic edc:cname="SLA_W_HAS_BEEN_TRANSMITTED_ACK_HAS_BEEN_RECEIVED" edc:desc="SLA+W has been transmitted; ACK has been received." edc:when="(field &amp; 0x1F) == 0x18"/>
                <edc:SFRFieldSemantic edc:cname="SLA_W_HAS_BEEN_TRANSMITTED_NOT_ACK_HAS_BEEN_RECEIVED" edc:desc="SLA+W has been transmitted; NOT ACK has been received." edc:when="(field &amp; 0x1F) == 0x20"/>
                <edc:SFRFieldSemantic edc:cname="DATA_BYTE_HAS_BEEN_TRANSMITTED_ACK_HAS_BEEN_RECEIVED" edc:desc="Data byte has been transmitted; ACK has been received." edc:when="(field &amp; 0x1F) == 0x28"/>
                <edc:SFRFieldSemantic edc:cname="DATA_BYTE_HAS_BEEN_TRANSMITTED_NOT_ACK_HAS_BEEN_RECEIVED" edc:desc="Data byte has been transmitted; NOT ACK has been received." edc:when="(field &amp; 0x1F) == 0x30"/>
                <edc:SFRFieldSemantic edc:cname="ARBITRATION_LOST_IN_SLA_W_OR_DATA_BYTES_TRANSMITTER_ARBITRATION_LOST_IN_SLA_R_OR_NOT_ACK_BIT_RECEIVER" edc:desc="Arbitration lost in SLA+W or data bytes (Transmitter); Arbitration lost in SLA+R or NOT ACK bit (Receiver)." edc:when="(field &amp; 0x1F) == 0x38"/>
                <edc:SFRFieldSemantic edc:cname="SLA_R_HAS_BEEN_TRANSMITTED_ACK_HAS_BEEN_RECEIVED" edc:desc="SLA+R has been transmitted; ACK has been received." edc:when="(field &amp; 0x1F) == 0x40"/>
                <edc:SFRFieldSemantic edc:cname="SLA_R_HAS_BEEN_TRANSMITTED_NOT_ACK_HAS_BEEN_RECEIVED" edc:desc="SLA+R has been transmitted; NOT ACK has been received." edc:when="(field &amp; 0x1F) == 0x48"/>
                <edc:SFRFieldSemantic edc:cname="DATA_BYTE_HAS_BEEN_RECEIVED_ACK_HAS_BEEN_RETURNED" edc:desc="Data byte has been received; ACK has been returned." edc:when="(field &amp; 0x1F) == 0x50"/>
                <edc:SFRFieldSemantic edc:cname="DATA_BYTE_HAS_BEEN_RECEIVED_NOT_ACK_HAS_BEEN_RETURNED" edc:desc="Data byte has been received; NOT ACK has been returned." edc:when="(field &amp; 0x1F) == 0x58"/>
                <edc:SFRFieldSemantic edc:cname="OWN_SLA_W_HAS_BEEN_RECEIVED_ACK_HAS_BEEN_RETURNED" edc:desc="Own SLA+W has been received; ACK has been returned." edc:when="(field &amp; 0x1F) == 0x60"/>
                <edc:SFRFieldSemantic edc:cname="ARBITRATION_LOST_IN_SLA_R_W_AS_MASTER_OWN_SLA_W_HAS_BEEN_RECEIVED_ACK_HAS_BEEN_RETURNED" edc:desc="Arbitration lost in SLA+R/W as Master; own SLA+W has been received; ACK has been returned." edc:when="(field &amp; 0x1F) == 0x68"/>
                <edc:SFRFieldSemantic edc:cname="GENERAL_CALL_ADDRESS_HAS_BEEN_RECEIVED_ACK_HAS_BEEN_RETURNED" edc:desc="General call address has been received; ACK has been returned." edc:when="(field &amp; 0x1F) == 0x70"/>
                <edc:SFRFieldSemantic edc:cname="ARBITRATION_LOST_IN_SLA_R_W_AS_MASTER_GENERAL_CALL_ADDRESS_HAS_BEEN_RECEIVED_ACK_HAS_BEEN_RETURNED" edc:desc="Arbitration lost in SLA+R/W as Master; general call address has been received; ACK has been returned." edc:when="(field &amp; 0x1F) == 0x78"/>
                <edc:SFRFieldSemantic edc:cname="PREVIOUSLY_ADDRESSED_WITH_OWN_SLA_W_DATA_HAS_BEEN_RECEIVED_ACK_HAS_BEEN_RETURNED" edc:desc="Previously addressed with own SLA+W; data has been received; ACK has been returned." edc:when="(field &amp; 0x1F) == 0x80"/>
                <edc:SFRFieldSemantic edc:cname="PREVIOUSLY_ADDRESSED_WITH_OWN_SLA_W_DATA_HAS_BEEN_RECEIVED_NOT_ACK_HAS_BEEN_RETURNED" edc:desc="Previously addressed with own SLA+W; data has been received; NOT ACK has been returned." edc:when="(field &amp; 0x1F) == 0x88"/>
                <edc:SFRFieldSemantic edc:cname="PREVIOUSLY_ADDRESSED_WITH_GENERAL_CALL_DATA_HAS_BEEN_RECEIVED_ACK_HAS_BEEN_RETURNED" edc:desc="Previously addressed with general call; data has been received; ACK has been returned." edc:when="(field &amp; 0x1F) == 0x90"/>
                <edc:SFRFieldSemantic edc:cname="PREVIOUSLY_ADDRESSED_WITH_GENERAL_CALL_DATA_HAS_BEEN_RECEIVED_NOT_ACK_HAS_BEEN_RETURNED" edc:desc="Previously addressed with general call; data has been received; NOT ACK has been returned." edc:when="(field &amp; 0x1F) == 0x98"/>
                <edc:SFRFieldSemantic edc:cname="A_STOP_CONDITION_OR_REPEATED_START_CONDITION_HAS_BEEN_RECEIVED_WHILE_STILL_ADDRESSED_AS_SLAVE" edc:desc="A STOP condition or repeated START condition has been received while still addressed as Slave." edc:when="(field &amp; 0x1F) == 0xA0"/>
                <edc:SFRFieldSemantic edc:cname="OWN_SLA_R_HAS_BEEN_RECEIVED_ACK_HAS_BEEN_RETURNED" edc:desc="Own SLA+R has been received; ACK has been returned." edc:when="(field &amp; 0x1F) == 0xA8"/>
                <edc:SFRFieldSemantic edc:cname="ARBITRATION_LOST_IN_SLA_R_W_AS_MASTER_OWN_SLA_R_HAS_BEEN_RECEIVED_ACK_HAS_BEEN_RETURNED" edc:desc="Arbitration lost in SLA+R/W as Master; own SLA+R has been received; ACK has been returned." edc:when="(field &amp; 0x1F) == 0xB0"/>
                <edc:SFRFieldSemantic edc:cname="DATA_BYTE_IN_TWDR_HAS_BEEN_TRANSMITTED_ACK_HAS_BEEN_RECEIVED" edc:desc="Data byte in TWDR has been transmitted; ACK has been received." edc:when="(field &amp; 0x1F) == 0xB8"/>
                <edc:SFRFieldSemantic edc:cname="DATA_BYTE_IN_TWDR_HAS_BEEN_TRANSMITTED_NO_ACK_HAS_BEEN_RECEIVED" edc:desc="Data byte in TWDR has been transmitted; NO ACK has been received." edc:when="(field &amp; 0x1F) == 0xC0"/>
                <edc:SFRFieldSemantic edc:cname="LAST_DATA_BYTE_IN_TWDR_HAS_BEEN_TRANSMITTED_TWEA_0_ACK_HAS_BEEN_RECEIVED" edc:desc="Last data byte in TWDR has been transmitted (TWEA = 0); ACK has been received." edc:when="(field &amp; 0x1F) == 0xC8"/>
                <edc:SFRFieldSemantic edc:cname="NO_RELEVANT_STATE_INFORMATION_AVAILABLE_TWINT_0" edc:desc="No relevant state information available; TWINT = 0." edc:when="(field &amp; 0x1F) == 0xF8"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TWI" edc:cname="TWAR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xBA">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TWI">
              <edc:SFRFieldDef edc:cname="TWGCE" edc:nzwidth="0x1" edc:desc="TWI General Call Recognition Enable Bit"/>
              <edc:SFRFieldDef edc:cname="TWA" edc:nzwidth="0x7" edc:desc="TWI (Slave) Address"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TWI" edc:cname="TWDR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xBB"/>
        <edc:SFRDef ltx:memberofperipheral="TWI" edc:cname="TWCR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xBC">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TWI">
              <edc:SFRFieldDef edc:cname="TWIE" edc:nzwidth="0x1" edc:desc="TWI Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x1" edc:desc="Reserved Bit"/>
              <edc:SFRFieldDef edc:cname="TWEN" edc:nzwidth="0x1" edc:desc="TWI Enable Bit"/>
              <edc:SFRFieldDef edc:cname="TWWC" edc:nzwidth="0x1" edc:desc="TWI Write Collision Flag"/>
              <edc:SFRFieldDef edc:cname="TWSTO" edc:nzwidth="0x1" edc:desc="TWI STOP Condition Bit"/>
              <edc:SFRFieldDef edc:cname="TWSTA" edc:nzwidth="0x1" edc:desc="TWI START Condition Bit"/>
              <edc:SFRFieldDef edc:cname="TWEA" edc:nzwidth="0x1" edc:desc="TWI Enable Acknowledge Bit"/>
              <edc:SFRFieldDef edc:cname="TWINT" edc:nzwidth="0x1" edc:desc="TWI Interrupt Flag"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TWI" edc:cname="TWAMR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xBD">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TWI">
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x1" edc:desc="Reserved Bit"/>
              <edc:SFRFieldDef edc:cname="TWAM" edc:nzwidth="0x7" edc:desc="TWI Address Mask"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="IRQ_MASK1" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xBE">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="TX_START_EN" edc:nzwidth="0x1" edc:desc="Transmit Start Interrupt enable"/>
              <edc:SFRFieldDef edc:cname="MAF_0_AMI_EN" edc:nzwidth="0x1" edc:desc="Address Match Interrupt enable Address filter 0"/>
              <edc:SFRFieldDef edc:cname="MAF_1_AMI_EN" edc:nzwidth="0x1" edc:desc="Address Match Interrupt enable Address filter 1"/>
              <edc:SFRFieldDef edc:cname="MAF_2_AMI_EN" edc:nzwidth="0x1" edc:desc="Address Match Interrupt enable Address filter 2"/>
              <edc:SFRFieldDef edc:cname="MAF_3_AMI_EN" edc:nzwidth="0x1" edc:desc="Address Match Interrupt enable Address filter 3"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x3" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="IRQ_STATUS1" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xBF">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="TX_START" edc:nzwidth="0x1" edc:desc="Transmit Start Interrupt Status"/>
              <edc:SFRFieldDef edc:cname="MAF_0_AMI" edc:nzwidth="0x1" edc:desc="Address Match Interrupt Status Address filter 0"/>
              <edc:SFRFieldDef edc:cname="MAF_1_AMI" edc:nzwidth="0x1" edc:desc="Address Match Interrupt Status Address filter 1"/>
              <edc:SFRFieldDef edc:cname="MAF_2_AMI" edc:nzwidth="0x1" edc:desc="Address Match Interrupt Status Address filter 2"/>
              <edc:SFRFieldDef edc:cname="MAF_3_AMI" edc:nzwidth="0x1" edc:desc="Address Match Interrupt Status Address filter 3"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x3" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="USART0 USART0_SPI" edc:cname="UCSR0A" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xC0">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="USART0">
              <edc:SFRFieldDef edc:cname="MPCM0" edc:nzwidth="0x1" edc:desc="Multi-processor Communication Mode"/>
              <edc:SFRFieldDef edc:cname="U2X0" edc:nzwidth="0x1" edc:desc="Double the USART Transmission Speed"/>
              <edc:SFRFieldDef edc:cname="UPE0" edc:nzwidth="0x1" edc:desc="USART Parity Error"/>
              <edc:SFRFieldDef edc:cname="DOR0" edc:nzwidth="0x1" edc:desc="Data OverRun"/>
              <edc:SFRFieldDef edc:cname="FE0" edc:nzwidth="0x1" edc:desc="Frame Error"/>
              <edc:SFRFieldDef edc:cname="UDRE0" edc:nzwidth="0x1" edc:desc="USART Data Register Empty"/>
              <edc:SFRFieldDef edc:cname="TXC0" edc:nzwidth="0x1" edc:desc="USART Transmit Complete"/>
              <edc:SFRFieldDef edc:cname="RXC0" edc:nzwidth="0x1" edc:desc="USART Receive Complete"/>
            </edc:SFRMode>
            <edc:SFRMode edc:id="DS.1" ltx:memberofperipheral="USART0_SPI">
              <edc:AdjustPoint edc:offset="0x5"/>
              <edc:SFRFieldDef edc:cname="UDRE0" edc:nzwidth="0x1" edc:desc="USART Data Register Empty"/>
              <edc:SFRFieldDef edc:cname="TXC0" edc:nzwidth="0x1" edc:desc="USART Transmit Complete"/>
              <edc:SFRFieldDef edc:cname="RXC0" edc:nzwidth="0x1" edc:desc="USART Receive Complete"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="USART0 USART0_SPI" edc:cname="UCSR0B" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xC1">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="USART0">
              <edc:SFRFieldDef edc:cname="TXB80" edc:nzwidth="0x1" edc:desc="Transmit Data Bit 8"/>
              <edc:SFRFieldDef edc:cname="RXB80" edc:nzwidth="0x1" edc:desc="Receive Data Bit 8"/>
              <edc:SFRFieldDef edc:cname="UCSZ02" edc:nzwidth="0x1" edc:desc="Character Size"/>
              <edc:SFRFieldDef edc:cname="TXEN0" edc:nzwidth="0x1" edc:desc="Transmitter Enable"/>
              <edc:SFRFieldDef edc:cname="RXEN0" edc:nzwidth="0x1" edc:desc="Receiver Enable"/>
              <edc:SFRFieldDef edc:cname="UDRIE0" edc:nzwidth="0x1" edc:desc="USART Data Register Empty Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="TXCIE0" edc:nzwidth="0x1" edc:desc="TX Complete Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="RXCIE0" edc:nzwidth="0x1" edc:desc="RX Complete Interrupt Enable"/>
            </edc:SFRMode>
            <edc:SFRMode edc:id="DS.1" ltx:memberofperipheral="USART0_SPI">
              <edc:AdjustPoint edc:offset="0x3"/>
              <edc:SFRFieldDef edc:cname="TXEN0" edc:nzwidth="0x1" edc:desc="Transmitter Enable"/>
              <edc:SFRFieldDef edc:cname="RXEN0" edc:nzwidth="0x1" edc:desc="Receiver Enable"/>
              <edc:SFRFieldDef edc:cname="UDRIE0" edc:nzwidth="0x1" edc:desc="USART Data Register Empty Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="TXCIE0" edc:nzwidth="0x1" edc:desc="TX Complete Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="RXCIE0" edc:nzwidth="0x1" edc:desc="RX Complete Interrupt Enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="USART0 USART0_SPI" edc:cname="UCSR0C" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xC2">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="USART0">
              <edc:SFRFieldDef edc:cname="UCPOL0" edc:nzwidth="0x1" edc:desc="Clock Polarity">
                <edc:SFRFieldSemantic edc:cname="RISING_XCKN_EDGE_TRANSMITTED_DATA_CHANGED_FALLING_XCKN_EDGE_RECEIVED_DATA_SAMPLED" edc:desc="Rising XCKn Edge (Transmitted Data Changed), Falling XCKn Edge (Received Data Sampled)" edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="FALLING_XCKN_EDGE_TRANSMITTED_DATA_CHANGED_RISING_XCKN_EDGE_RECEIVED_DATA_SAMPLED" edc:desc="Falling XCKn Edge (Transmitted Data Changed), Rising XCKn Edge (Received Data Sampled)" edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="UCSZ0" edc:nzwidth="0x2" edc:desc="Character Size">
                <edc:SFRFieldSemantic edc:cname="5_BIT" edc:desc="5-bit" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="6_BIT" edc:desc="6-bit" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="7_BIT" edc:desc="7-bit" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="8_BIT" edc:desc="8-bit" edc:when="(field &amp; 0x3) == 3"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 4"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 5"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 6"/>
                <edc:SFRFieldSemantic edc:cname="9_BIT" edc:desc="9-bit" edc:when="(field &amp; 0x3) == 7"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="USBS0" edc:nzwidth="0x1" edc:desc="Stop Bit Select">
                <edc:SFRFieldSemantic edc:cname="1_BIT" edc:desc="1-bit" edc:when="(field &amp; 0x1) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="2_BIT" edc:desc="2-bit" edc:when="(field &amp; 0x1) == 0x01"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="UPM0" edc:nzwidth="0x2" edc:desc="Parity Mode">
                <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="Disabled" edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="ENABLED_EVEN_PARITY" edc:desc="Enabled, Even Parity" edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="ENABLED_ODD_PARITY" edc:desc="Enabled, Odd Parity" edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="UMSEL0" edc:nzwidth="0x2" edc:desc="USART Mode Select">
                <edc:SFRFieldSemantic edc:cname="ASYNCHRONOUS_USART" edc:desc="Asynchronous USART" edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="SYNCHRONOUS_USART" edc:desc="Synchronous USART" edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="MASTER_SPI_MSPIM" edc:desc="Master SPI (MSPIM)" edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
            <edc:SFRMode edc:id="DS.1" ltx:memberofperipheral="USART0_SPI">
              <edc:SFRFieldDef edc:cname="UCPOL0" edc:nzwidth="0x1" edc:desc="Clock Polarity"/>
              <edc:SFRFieldDef edc:cname="UCPHA0" edc:nzwidth="0x1" edc:desc="Clock Phase"/>
              <edc:SFRFieldDef edc:cname="UDORD0" edc:nzwidth="0x1" edc:desc="Data Order"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0xC3"/>
        <edc:SFRDef ltx:memberofperipheral="USART0" edc:cname="UBRR0" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0xC4"/>
        <edc:SFRDef ltx:memberofperipheral="USART0" edc:cname="UDR0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xC6"/>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0xC7"/>
        <edc:SFRDef ltx:memberofperipheral="USART1 USART1_SPI" edc:cname="UCSR1A" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xC8">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="USART1">
              <edc:SFRFieldDef edc:cname="MPCM1" edc:nzwidth="0x1" edc:desc="Multi-processor Communication Mode"/>
              <edc:SFRFieldDef edc:cname="U2X1" edc:nzwidth="0x1" edc:desc="Double the USART Transmission Speed"/>
              <edc:SFRFieldDef edc:cname="UPE1" edc:nzwidth="0x1" edc:desc="USART Parity Error"/>
              <edc:SFRFieldDef edc:cname="DOR1" edc:nzwidth="0x1" edc:desc="Data OverRun"/>
              <edc:SFRFieldDef edc:cname="FE1" edc:nzwidth="0x1" edc:desc="Frame Error"/>
              <edc:SFRFieldDef edc:cname="UDRE1" edc:nzwidth="0x1" edc:desc="USART Data Register Empty"/>
              <edc:SFRFieldDef edc:cname="TXC1" edc:nzwidth="0x1" edc:desc="USART Transmit Complete"/>
              <edc:SFRFieldDef edc:cname="RXC1" edc:nzwidth="0x1" edc:desc="USART Receive Complete"/>
            </edc:SFRMode>
            <edc:SFRMode edc:id="DS.1" ltx:memberofperipheral="USART1_SPI">
              <edc:AdjustPoint edc:offset="0x5"/>
              <edc:SFRFieldDef edc:cname="UDRE1" edc:nzwidth="0x1" edc:desc="USART Data Register Empty"/>
              <edc:SFRFieldDef edc:cname="TXC1" edc:nzwidth="0x1" edc:desc="USART Transmit Complete"/>
              <edc:SFRFieldDef edc:cname="RXC1" edc:nzwidth="0x1" edc:desc="USART Receive Complete"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="USART1 USART1_SPI" edc:cname="UCSR1B" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xC9">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="USART1">
              <edc:SFRFieldDef edc:cname="TXB81" edc:nzwidth="0x1" edc:desc="Transmit Data Bit 8"/>
              <edc:SFRFieldDef edc:cname="RXB81" edc:nzwidth="0x1" edc:desc="Receive Data Bit 8"/>
              <edc:SFRFieldDef edc:cname="UCSZ12" edc:nzwidth="0x1" edc:desc="Character Size"/>
              <edc:SFRFieldDef edc:cname="TXEN1" edc:nzwidth="0x1" edc:desc="Transmitter Enable"/>
              <edc:SFRFieldDef edc:cname="RXEN1" edc:nzwidth="0x1" edc:desc="Receiver Enable"/>
              <edc:SFRFieldDef edc:cname="UDRIE1" edc:nzwidth="0x1" edc:desc="USART Data Register Empty Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="TXCIE1" edc:nzwidth="0x1" edc:desc="TX Complete Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="RXCIE1" edc:nzwidth="0x1" edc:desc="RX Complete Interrupt Enable"/>
            </edc:SFRMode>
            <edc:SFRMode edc:id="DS.1" ltx:memberofperipheral="USART1_SPI">
              <edc:AdjustPoint edc:offset="0x3"/>
              <edc:SFRFieldDef edc:cname="TXEN1" edc:nzwidth="0x1" edc:desc="Transmitter Enable"/>
              <edc:SFRFieldDef edc:cname="RXEN1" edc:nzwidth="0x1" edc:desc="Receiver Enable"/>
              <edc:SFRFieldDef edc:cname="UDRIE1" edc:nzwidth="0x1" edc:desc="USART Data Register Empty Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="TXCIE1" edc:nzwidth="0x1" edc:desc="TX Complete Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="RXCIE1" edc:nzwidth="0x1" edc:desc="RX Complete Interrupt Enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="USART1 USART1_SPI" edc:cname="UCSR1C" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xCA">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="USART1">
              <edc:SFRFieldDef edc:cname="UCPOL1" edc:nzwidth="0x1" edc:desc="Clock Polarity">
                <edc:SFRFieldSemantic edc:cname="RISING_XCKN_EDGE_TRANSMITTED_DATA_CHANGED_FALLING_XCKN_EDGE_RECEIVED_DATA_SAMPLED" edc:desc="Rising XCKn Edge (Transmitted Data Changed), Falling XCKn Edge (Received Data Sampled)" edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="FALLING_XCKN_EDGE_TRANSMITTED_DATA_CHANGED_RISING_XCKN_EDGE_RECEIVED_DATA_SAMPLED" edc:desc="Falling XCKn Edge (Transmitted Data Changed), Rising XCKn Edge (Received Data Sampled)" edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="UCSZ1" edc:nzwidth="0x2" edc:desc="Character Size">
                <edc:SFRFieldSemantic edc:cname="5_BIT" edc:desc="5-bit" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="6_BIT" edc:desc="6-bit" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="7_BIT" edc:desc="7-bit" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="8_BIT" edc:desc="8-bit" edc:when="(field &amp; 0x3) == 3"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 4"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 5"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 6"/>
                <edc:SFRFieldSemantic edc:cname="9_BIT" edc:desc="9-bit" edc:when="(field &amp; 0x3) == 7"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="USBS1" edc:nzwidth="0x1" edc:desc="Stop Bit Select">
                <edc:SFRFieldSemantic edc:cname="1_BIT" edc:desc="1-bit" edc:when="(field &amp; 0x1) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="2_BIT" edc:desc="2-bit" edc:when="(field &amp; 0x1) == 0x01"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="UPM1" edc:nzwidth="0x2" edc:desc="Parity Mode">
                <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="Disabled" edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="ENABLED_EVEN_PARITY" edc:desc="Enabled, Even Parity" edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="ENABLED_ODD_PARITY" edc:desc="Enabled, Odd Parity" edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="UMSEL1" edc:nzwidth="0x2" edc:desc="USART Mode Select">
                <edc:SFRFieldSemantic edc:cname="ASYNCHRONOUS_USART" edc:desc="Asynchronous USART" edc:when="(field &amp; 0x3) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="SYNCHRONOUS_USART" edc:desc="Synchronous USART" edc:when="(field &amp; 0x3) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="MASTER_SPI_MSPIM" edc:desc="Master SPI (MSPIM)" edc:when="(field &amp; 0x3) == 0x03"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
            <edc:SFRMode edc:id="DS.1" ltx:memberofperipheral="USART1_SPI">
              <edc:SFRFieldDef edc:cname="UCPOL1" edc:nzwidth="0x1" edc:desc="Clock Polarity"/>
              <edc:SFRFieldDef edc:cname="UCPHA1" edc:nzwidth="0x1" edc:desc="Clock Phase"/>
              <edc:SFRFieldDef edc:cname="UDORD1" edc:nzwidth="0x1" edc:desc="Data Order"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0xCB"/>
        <edc:SFRDef ltx:memberofperipheral="USART1" edc:cname="UBRR1" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0xCC"/>
        <edc:SFRDef ltx:memberofperipheral="USART1" edc:cname="UDR1" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xCE"/>
        <edc:AdjustPoint edc:offset="0x8" edc:_addr="0xCF"/>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCRSTRLL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xD7">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCRSTRLL" edc:nzwidth="0x8" edc:desc="Symbol Counter Received Frame Timestamp Register LL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCRSTRLH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xD8">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCRSTRLH" edc:nzwidth="0x8" edc:desc="Symbol Counter Received Frame Timestamp Register LH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCRSTRHL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xD9">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCRSTRHL" edc:nzwidth="0x8" edc:desc="Symbol Counter Received Frame Timestamp Register HL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCRSTRHH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xDA">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCRSTRHH" edc:nzwidth="0x8" edc:desc="Symbol Counter Received Frame Timestamp Register HH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCCSR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xDB">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCCS1" edc:nzwidth="0x2" edc:desc="Symbol Counter Compare Source select register for Compare Units">
                <edc:SFRFieldSemantic edc:cname="COMPARE_UNIT_1_RELATIVE_COMPARE_SOURCE_BEACON_TIMESTAMP_REGISTER" edc:desc="Compare Unit 1 Relative Compare Source = Beacon Timestamp Register" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="COMPARE_UNIT_1_RELATIVE_COMPARE_SOURCE_TRANSMIT_FRAME_TIMESTAMP_REGISTER" edc:desc="Compare Unit 1 Relative Compare Source = Transmit Frame Timestamp Register" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="COMPARE_UNIT_1_RELATIVE_COMPARE_SOURCE_RECEIVED_FRAME_TIMESTAMP_REGISTER" edc:desc="Compare Unit 1 Relative Compare Source = Received Frame Timestamp Register" edc:when="(field &amp; 0x3) == 2"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="SCCS2" edc:nzwidth="0x2" edc:desc="Symbol Counter Compare Source select register for Compare Unit 2">
                <edc:SFRFieldSemantic edc:cname="COMPARE_UNIT_2_RELATIVE_COMPARE_SOURCE_BEACON_TIMESTAMP_REGISTER" edc:desc="Compare Unit 2 Relative Compare Source = Beacon Timestamp Register" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="COMPARE_UNIT_2_RELATIVE_COMPARE_SOURCE_TRANSMIT_FRAME_TIMESTAMP_REGISTER" edc:desc="Compare Unit 2 Relative Compare Source = Transmit Frame Timestamp Register" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="COMPARE_UNIT_2_RELATIVE_COMPARE_SOURCE_RECEIVED_FRAME_TIMESTAMP_REGISTER" edc:desc="Compare Unit 2 Relative Compare Source = Received Frame Timestamp Register" edc:when="(field &amp; 0x3) == 2"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="SCCS3" edc:nzwidth="0x2" edc:desc="Symbol Counter Compare Source select register for Compare Unit 3">
                <edc:SFRFieldSemantic edc:cname="COMPARE_UNIT_3_RELATIVE_COMPARE_SOURCE_BEACON_TIMESTAMP_REGISTER" edc:desc="Compare Unit 3 Relative Compare Source = Beacon Timestamp Register" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="COMPARE_UNIT_3_RELATIVE_COMPARE_SOURCE_TRANSMIT_FRAME_TIMESTAMP_REGISTER" edc:desc="Compare Unit 3 Relative Compare Source = Transmit Frame Timestamp Register" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="COMPARE_UNIT_3_RELATIVE_COMPARE_SOURCE_RECEIVED_FRAME_TIMESTAMP_REGISTER" edc:desc="Compare Unit 3 Relative Compare Source = Received Frame Timestamp Register" edc:when="(field &amp; 0x3) == 2"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x2" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCCR0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xDC">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCCMP" edc:nzwidth="0x3" edc:desc="Symbol Counter Compare Unit 3 Mode select"/>
              <edc:SFRFieldDef edc:cname="SCTSE" edc:nzwidth="0x1" edc:desc="Symbol Counter Automatic Timestamping enable"/>
              <edc:SFRFieldDef edc:cname="SCCKSEL" edc:nzwidth="0x1" edc:desc="Symbol Counter Clock Source select"/>
              <edc:SFRFieldDef edc:cname="SCEN" edc:nzwidth="0x1" edc:desc="Symbol Counter enable"/>
              <edc:SFRFieldDef edc:cname="SCMBTS" edc:nzwidth="0x1" edc:desc="Manual Beacon Timestamp"/>
              <edc:SFRFieldDef edc:cname="SCRES" edc:nzwidth="0x1" edc:desc="Symbol Counter Synchronization"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCCR1" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xDD">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCENBO" edc:nzwidth="0x1" edc:desc="Backoff Slot Counter enable"/>
              <edc:SFRFieldDef edc:cname="SCEECLK" edc:nzwidth="0x1" edc:desc="Enable External Clock Source on PG2"/>
              <edc:SFRFieldDef edc:cname="SCCKDIV" edc:nzwidth="0x3" edc:desc="Clock divider for synchronous clock source (16MHz Transceiver Clock)">
                <edc:SFRFieldSemantic edc:cname="TRANSCEIVER_CLOCK_DIVIDED_BY_256_62_5KHZ" edc:desc="Transceiver Clock divided by 256, (62.5kHz)" edc:when="(field &amp; 0x7) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TRANSCEIVER_CLOCK_DIVIDED_BY_128_125KHZ" edc:desc="Transceiver Clock divided by 128, (125kHz)" edc:when="(field &amp; 0x7) == 1"/>
                <edc:SFRFieldSemantic edc:cname="TRANSCEIVER_CLOCK_DIVIDED_BY_64_250KHZ" edc:desc="Transceiver Clock divided by 64,  (250kHz)" edc:when="(field &amp; 0x7) == 2"/>
                <edc:SFRFieldSemantic edc:cname="TRANSCEIVER_CLOCK_DIVIDED_BY_32_500KHZ" edc:desc="Transceiver Clock divided by 32,  (500kHz)" edc:when="(field &amp; 0x7) == 3"/>
                <edc:SFRFieldSemantic edc:cname="TRANSCEIVER_CLOCK_DIVIDED_BY_16_1MHZ" edc:desc="Transceiver Clock divided by 16,  (1MHz)" edc:when="(field &amp; 0x7) == 4"/>
                <edc:SFRFieldSemantic edc:cname="TRANSCEIVER_CLOCK_DIVIDED_BY_8_2MHZ" edc:desc="Transceiver Clock divided by 8,   (2MHz)" edc:when="(field &amp; 0x7) == 5"/>
                <edc:SFRFieldSemantic edc:cname="TRANSCEIVER_CLOCK_DIVIDED_BY_4_4MHZ" edc:desc="Transceiver Clock divided by 4,   (4MHz)" edc:when="(field &amp; 0x7) == 6"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="SCBTSM" edc:nzwidth="0x1" edc:desc="Symbol Counter Beacon Timestamp Mask Register"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x2" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCSR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xDE">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCBSY" edc:nzwidth="0x1" edc:desc="Symbol Counter busy"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x7" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCIRQM" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xDF">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="IRQMCP" edc:nzwidth="0x3" edc:desc="Symbol Counter Compare Match 3 IRQ enable"/>
              <edc:SFRFieldDef edc:cname="IRQMOF" edc:nzwidth="0x1" edc:desc="Symbol Counter Overflow IRQ enable"/>
              <edc:SFRFieldDef edc:cname="IRQMBO" edc:nzwidth="0x1" edc:desc="Backoff Slot Counter IRQ enable"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x3" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCIRQS" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xE0">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="IRQSCP" edc:nzwidth="0x3" edc:desc="Compare Unit 3 Compare Match IRQ"/>
              <edc:SFRFieldDef edc:cname="IRQSOF" edc:nzwidth="0x1" edc:desc="Symbol Counter Overflow IRQ"/>
              <edc:SFRFieldDef edc:cname="IRQSBO" edc:nzwidth="0x1" edc:desc="Backoff Slot Counter IRQ"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x3" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCCNTLL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xE1">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCCNTLL" edc:nzwidth="0x8" edc:desc="Symbol Counter Register LL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCCNTLH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xE2">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCCNTLH" edc:nzwidth="0x8" edc:desc="Symbol Counter Register LH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCCNTHL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xE3">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCCNTHL" edc:nzwidth="0x8" edc:desc="Symbol Counter Register HL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCCNTHH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xE4">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCCNTHH" edc:nzwidth="0x8" edc:desc="Symbol Counter Register HH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCBTSRLL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xE5">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCBTSRLL" edc:nzwidth="0x8" edc:desc="Symbol Counter Beacon Timestamp Register LL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCBTSRLH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xE6">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCBTSRLH" edc:nzwidth="0x8" edc:desc="Symbol Counter Beacon Timestamp Register LH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCBTSRHL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xE7">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCBTSRHL" edc:nzwidth="0x8" edc:desc="Symbol Counter Beacon Timestamp Register HL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCBTSRHH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xE8">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCBTSRHH" edc:nzwidth="0x8" edc:desc="Symbol Counter Beacon Timestamp Register HH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCTSRLL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xE9">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCTSRLL" edc:nzwidth="0x8" edc:desc="Symbol Counter Frame Timestamp Register LL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCTSRLH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xEA">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCTSRLH" edc:nzwidth="0x8" edc:desc="Symbol Counter Frame Timestamp Register LH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCTSRHL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xEB">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCTSRHL" edc:nzwidth="0x8" edc:desc="Symbol Counter Frame Timestamp Register HL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCTSRHH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xEC">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCTSRHH" edc:nzwidth="0x8" edc:desc="Symbol Counter Frame Timestamp Register HH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCOCR3LL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xED">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCOCR3LL" edc:nzwidth="0x8" edc:desc="Symbol Counter Output Compare Register 3 LL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCOCR3LH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xEE">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCOCR3LH" edc:nzwidth="0x8" edc:desc="Symbol Counter Output Compare Register 3 LH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCOCR3HL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xEF">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCOCR3HL" edc:nzwidth="0x8" edc:desc="Symbol Counter Output Compare Register 3 HL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCOCR3HH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xF0">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCOCR3HH" edc:nzwidth="0x8" edc:desc="Symbol Counter Output Compare Register 3 HH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCOCR2LL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xF1">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCOCR2LL" edc:nzwidth="0x8" edc:desc="Symbol Counter Output Compare Register 2 LL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCOCR2LH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xF2">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCOCR2LH" edc:nzwidth="0x8" edc:desc="Symbol Counter Output Compare Register 2 LH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCOCR2HL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xF3">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCOCR2HL" edc:nzwidth="0x8" edc:desc="Symbol Counter Output Compare Register 2 HL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCOCR2HH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xF4">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCOCR2HH" edc:nzwidth="0x8" edc:desc="Symbol Counter Output Compare Register 2 HH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCOCR1LL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xF5">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCOCR1LL" edc:nzwidth="0x8" edc:desc="Symbol Counter Output Compare Register 1 LL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCOCR1LH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xF6">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCOCR1LH" edc:nzwidth="0x8" edc:desc="Symbol Counter Output Compare Register 1 LH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCOCR1HL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xF7">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCOCR1HL" edc:nzwidth="0x8" edc:desc="Symbol Counter Output Compare Register 1 HL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCOCR1HH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xF8">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCOCR1HH" edc:nzwidth="0x8" edc:desc="Symbol Counter Output Compare Register 1 HH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCTSTRLL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xF9">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCTSTRLL" edc:nzwidth="0x8" edc:desc="Symbol Counter Transmit Frame Timestamp Register LL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCTSTRLH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xFA">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCTSTRLH" edc:nzwidth="0x8" edc:desc="Symbol Counter Transmit Frame Timestamp Register LH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCTSTRHL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xFB">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCTSTRHL" edc:nzwidth="0x8" edc:desc="Symbol Counter Transmit Frame Timestamp Register HL-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="SYMCNT" edc:cname="SCTSTRHH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0xFC">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SYMCNT">
              <edc:SFRFieldDef edc:cname="SCTSTRHH" edc:nzwidth="0x8" edc:desc="Symbol Counter Transmit Frame Timestamp Register HH-Byte"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0xF" edc:_addr="0xFD"/>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFCR0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x10C">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAF0EN" edc:nzwidth="0x1" edc:desc="Multiple Address Filter 0 Enable"/>
              <edc:SFRFieldDef edc:cname="MAF1EN" edc:nzwidth="0x1" edc:desc="Multiple Address Filter 1 Enable"/>
              <edc:SFRFieldDef edc:cname="MAF2EN" edc:nzwidth="0x1" edc:desc="Multiple Address Filter 2 Enable"/>
              <edc:SFRFieldDef edc:cname="MAF3EN" edc:nzwidth="0x1" edc:desc="Multiple Address Filter 3 Enable"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x4" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFCR1" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x10D">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="AACK_0_I_AM_COORD" edc:nzwidth="0x1" edc:desc="Enable PAN Coordinator mode for address filter 0."/>
              <edc:SFRFieldDef edc:cname="AACK_0_SET_PD" edc:nzwidth="0x1" edc:desc="Set Data Pending bit for address filter 0."/>
              <edc:SFRFieldDef edc:cname="AACK_1_I_AM_COORD" edc:nzwidth="0x1" edc:desc="Enable PAN Coordinator mode for address filter 1."/>
              <edc:SFRFieldDef edc:cname="AACK_1_SET_PD" edc:nzwidth="0x1" edc:desc="Set Data Pending bit for address filter 1."/>
              <edc:SFRFieldDef edc:cname="AACK_2_I_AM_COORD" edc:nzwidth="0x1" edc:desc="Enable PAN Coordinator mode for address filter 2."/>
              <edc:SFRFieldDef edc:cname="AACK_2_SET_PD" edc:nzwidth="0x1" edc:desc="Set Data Pending bit for address filter 2."/>
              <edc:SFRFieldDef edc:cname="AACK_3_I_AM_COORD" edc:nzwidth="0x1" edc:desc="Enable PAN Coordinator mode for address filter 3."/>
              <edc:SFRFieldDef edc:cname="AACK_3_SET_PD" edc:nzwidth="0x1" edc:desc="Set Data Pending bit for address filter 3."/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFSA0L" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x10E">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFSA0L" edc:nzwidth="0x8" edc:desc="MAC Short Address low Byte for Frame Filter 0"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFSA0H" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x10F">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFSA0H" edc:nzwidth="0x8" edc:desc="MAC Short Address high Byte for Frame Filter 0"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFPA0L" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x110">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFPA0L" edc:nzwidth="0x8" edc:desc="MAC Personal Area Network ID low Byte for Frame Filter 0"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFPA0H" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x111">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFPA0H" edc:nzwidth="0x8" edc:desc="MAC Personal Area Network ID high Byte for Frame Filter 0"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFSA1L" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x112">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFSA1L" edc:nzwidth="0x8" edc:desc="MAC Short Address low Byte for Frame Filter 1"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFSA1H" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x113">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFSA1H" edc:nzwidth="0x8" edc:desc="MAC Short Address high Byte for Frame Filter 1"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFPA1L" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x114">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFPA1L" edc:nzwidth="0x8" edc:desc="MAC Personal Area Network ID low Byte for Frame Filter 1"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFPA1H" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x115">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFPA1H" edc:nzwidth="0x8" edc:desc="MAC Personal Area Network ID high Byte for Frame Filter 1"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFSA2L" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x116">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFSA2L" edc:nzwidth="0x8" edc:desc="MAC Short Address low Byte for Frame Filter 2"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFSA2H" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x117">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFSA2H" edc:nzwidth="0x8" edc:desc="MAC Short Address high Byte for Frame Filter 2"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFPA2L" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x118">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFPA2L" edc:nzwidth="0x8" edc:desc="MAC Personal Area Network ID low Byte for Frame Filter 2"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFPA2H" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x119">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFPA2H" edc:nzwidth="0x8" edc:desc="MAC Personal Area Network ID high Byte for Frame Filter 2"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFSA3L" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x11A">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFSA3L" edc:nzwidth="0x8" edc:desc="MAC Short Address low Byte for Frame Filter 3"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFSA3H" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x11B">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFSA3H" edc:nzwidth="0x8" edc:desc="MAC Short Address high Byte for Frame Filter 3"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFPA3L" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x11C">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFPA3L" edc:nzwidth="0x8" edc:desc="MAC Personal Area Network ID low Byte for Frame Filter 3"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAFPA3H" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x11D">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAFPA3H" edc:nzwidth="0x8" edc:desc="MAC Personal Area Network ID high Byte for Frame Filter 3"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x11E"/>
        <edc:SFRDef ltx:memberofperipheral="TC5" edc:cname="TCCR5A" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x120">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC5">
              <edc:SFRFieldDef edc:cname="WGM5" edc:nzwidth="0x2" edc:desc="Waveform Generation Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_MODE_OF_OPERATION" edc:desc="Normal mode of operation" edc:when="(field &amp; 0x3) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_8_BIT" edc:desc="PWM, phase correct, 8-bit" edc:when="(field &amp; 0x3) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_9_BIT" edc:desc="PWM, phase correct, 9-bit" edc:when="(field &amp; 0x3) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_10_BIT" edc:desc="PWM, phase correct, 10-bit" edc:when="(field &amp; 0x3) == 0x3"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x4"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_8_BIT" edc:desc="Fast PWM, 8-bit" edc:when="(field &amp; 0x3) == 0x5"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_9_BIT" edc:desc="Fast PWM, 9-bit" edc:when="(field &amp; 0x3) == 0x6"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_10_BIT" edc:desc="Fast PWM, 10-bit" edc:when="(field &amp; 0x3) == 0x7"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_ICRN" edc:desc="PWM, Phase and frequency correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0x8"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase and frequency correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x9"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_ICRN" edc:desc="PWM, Phase correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xA"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xB"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xC"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0xD"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_ICRN" edc:desc="Fast PWM, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xE"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_OCRNA" edc:desc="Fast PWM, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xF"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM5C" edc:nzwidth="0x2" edc:desc="Compare Output Mode for Channel C">
                <edc:SFRFieldSemantic edc:cname="NORMAL_OPERATION" edc:desc="Normal operation" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM5B" edc:nzwidth="0x2" edc:desc="Compare Output Mode for Channel B">
                <edc:SFRFieldSemantic edc:cname="NORMAL_OPERATION" edc:desc="Normal operation" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="COM5A" edc:nzwidth="0x2" edc:desc="Compare Output Mode for Channel A">
                <edc:SFRFieldSemantic edc:cname="NORMAL_OPERATION" edc:desc="Normal operation" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC5" edc:cname="TCCR5B" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x121">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC5">
              <edc:SFRFieldDef edc:cname="CS5" edc:nzwidth="0x3" edc:desc="Clock Select">
                <edc:SFRFieldSemantic edc:cname="NO_CLOCK_SOURCE_TIMER_COUNTER_STOPPED" edc:desc="No clock source (Timer/Counter stopped)" edc:when="(field &amp; 0x7) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_1_NO_PRESCALING" edc:desc="clk_IO/1 (no prescaling)" edc:when="(field &amp; 0x7) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_8_FROM_PRESCALER" edc:desc="clk_IO/8 (from prescaler)" edc:when="(field &amp; 0x7) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_64_FROM_PRESCALER" edc:desc="clk_IO/64 (from prescaler)" edc:when="(field &amp; 0x7) == 0x03"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_256_FROM_PRESCALER" edc:desc="clk_IO/256 (from prescaler)" edc:when="(field &amp; 0x7) == 0x04"/>
                <edc:SFRFieldSemantic edc:cname="CLK_IO_1024_FROM_PRESCALER" edc:desc="clk_IO/1024 (from prescaler)" edc:when="(field &amp; 0x7) == 0x05"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x7) == 0x06"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x7) == 0x07"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="WGM5" edc:nzwidth="0x2" edc:desc="Waveform Generation Mode">
                <edc:SFRFieldSemantic edc:cname="NORMAL_MODE_OF_OPERATION" edc:desc="Normal mode of operation" edc:when="(field &amp; 0x3) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_8_BIT" edc:desc="PWM, phase correct, 8-bit" edc:when="(field &amp; 0x3) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_9_BIT" edc:desc="PWM, phase correct, 9-bit" edc:when="(field &amp; 0x3) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_10_BIT" edc:desc="PWM, phase correct, 10-bit" edc:when="(field &amp; 0x3) == 0x3"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x4"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_8_BIT" edc:desc="Fast PWM, 8-bit" edc:when="(field &amp; 0x3) == 0x5"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_9_BIT" edc:desc="Fast PWM, 9-bit" edc:when="(field &amp; 0x3) == 0x6"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_10_BIT" edc:desc="Fast PWM, 10-bit" edc:when="(field &amp; 0x3) == 0x7"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_ICRN" edc:desc="PWM, Phase and frequency correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0x8"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_AND_FREQUENCY_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase and frequency correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0x9"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_ICRN" edc:desc="PWM, Phase correct, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xA"/>
                <edc:SFRFieldSemantic edc:cname="PWM_PHASE_CORRECT_TOP_OCRNA" edc:desc="PWM, Phase correct, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xB"/>
                <edc:SFRFieldSemantic edc:cname="CTC_TOP_OCRNA" edc:desc="CTC, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xC"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0xD"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_ICRN" edc:desc="Fast PWM, TOP = ICRn" edc:when="(field &amp; 0x3) == 0xE"/>
                <edc:SFRFieldSemantic edc:cname="FAST_PWM_TOP_OCRNA" edc:desc="Fast PWM, TOP = OCRnA" edc:when="(field &amp; 0x3) == 0xF"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x1" edc:desc="Reserved Bit"/>
              <edc:SFRFieldDef edc:cname="ICES5" edc:nzwidth="0x1" edc:desc="Input Capture 5 Edge Select"/>
              <edc:SFRFieldDef edc:cname="ICNC5" edc:nzwidth="0x1" edc:desc="Input Capture 5 Noise Canceller"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TC5" edc:cname="TCCR5C" edc:nzwidth="0x8" edc:access="nnn-----" edc:impl="0xE0" edc:_addr="0x122">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TC5">
              <edc:AdjustPoint edc:offset="0x5"/>
              <edc:SFRFieldDef edc:cname="FOC5C" edc:nzwidth="0x1" edc:desc="Force Output Compare for Channel C"/>
              <edc:SFRFieldDef edc:cname="FOC5B" edc:nzwidth="0x1" edc:desc="Force Output Compare for Channel B"/>
              <edc:SFRFieldDef edc:cname="FOC5A" edc:nzwidth="0x1" edc:desc="Force Output Compare for Channel A"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0x123"/>
        <edc:SFRDef ltx:memberofperipheral="TC5" edc:cname="TCNT5" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x124"/>
        <edc:SFRDef ltx:memberofperipheral="TC5" edc:cname="ICR5" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x126"/>
        <edc:SFRDef ltx:memberofperipheral="TC5" edc:cname="OCR5A" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x128"/>
        <edc:SFRDef ltx:memberofperipheral="TC5" edc:cname="OCR5B" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x12A"/>
        <edc:SFRDef ltx:memberofperipheral="TC5" edc:cname="OCR5C" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:_addr="0x12C"/>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0x12E"/>
        <edc:SFRDef ltx:memberofperipheral="PWRCTRL" edc:cname="LLCR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x12F">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWRCTRL">
              <edc:SFRFieldDef edc:cname="LLENCAL" edc:nzwidth="0x1" edc:desc="Enable Automatic Calibration"/>
              <edc:SFRFieldDef edc:cname="LLSHORT" edc:nzwidth="0x1" edc:desc="Short Lower Calibration Circuit"/>
              <edc:SFRFieldDef edc:cname="LLTCO" edc:nzwidth="0x1" edc:desc="Temperature Coefficient of Current Source"/>
              <edc:SFRFieldDef edc:cname="LLCAL" edc:nzwidth="0x1" edc:desc="Calibration Active"/>
              <edc:SFRFieldDef edc:cname="LLCOMP" edc:nzwidth="0x1" edc:desc="Comparator Output"/>
              <edc:SFRFieldDef edc:cname="LLDONE" edc:nzwidth="0x1" edc:desc="Calibration Done"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x2" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="PWRCTRL" edc:cname="LLDRL" edc:nzwidth="0x8" edc:access="----nnnn" edc:impl="0xF" edc:_addr="0x130">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWRCTRL">
              <edc:SFRFieldDef edc:cname="LLDRL" edc:nzwidth="0x4" edc:desc="Low-Byte Data Register Bits">
                <edc:SFRFieldSemantic edc:cname="CALIBRATION_LIMIT_FOR_FAST_PROCESS_CORNER_HIGH_OUTPUT_VOLTAGE" edc:desc="Calibration limit for fast process corner/high output voltage" edc:when="(field &amp; 0xF) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="CALIBRATION_LIMIT_FOR_SLOW_PROCESS_CORNER_LOW_OUTPUT_VOLTAGE" edc:desc="Calibration limit for slow process corner/low output voltage" edc:when="(field &amp; 0xF) == 0x08"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="PWRCTRL" edc:cname="LLDRH" edc:nzwidth="0x8" edc:access="---nnnnn" edc:impl="0x1F" edc:_addr="0x131">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWRCTRL">
              <edc:SFRFieldDef edc:cname="LLDRH" edc:nzwidth="0x5" edc:desc="High-Byte Data Register Bits">
                <edc:SFRFieldSemantic edc:cname="CALIBRATION_LIMIT_FOR_FAST_PROCESS_CORNER_HIGH_OUTPUT_VOLTAGE" edc:desc="Calibration limit for fast process corner/high output voltage" edc:when="(field &amp; 0x1F) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="CALIBRATION_LIMIT_FOR_SLOW_PROCESS_CORNER_LOW_OUTPUT_VOLTAGE" edc:desc="Calibration limit for slow process corner/low output voltage" edc:when="(field &amp; 0x1F) == 0x10"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="PWRCTRL" edc:cname="DRTRAM3" edc:nzwidth="0x8" edc:access="--nn----" edc:impl="0x30" edc:_addr="0x132">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWRCTRL">
              <edc:AdjustPoint edc:offset="0x4"/>
              <edc:SFRFieldDef edc:cname="ENDRT" edc:nzwidth="0x1" edc:desc="Enable SRAM Data Retention"/>
              <edc:SFRFieldDef edc:cname="DRTSWOK" edc:nzwidth="0x1" edc:desc="DRT Switch OK"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="PWRCTRL" edc:cname="DRTRAM2" edc:nzwidth="0x8" edc:access="-nnn----" edc:impl="0x70" edc:_addr="0x133">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWRCTRL">
              <edc:AdjustPoint edc:offset="0x4"/>
              <edc:SFRFieldDef edc:cname="ENDRT" edc:nzwidth="0x1" edc:desc="Enable SRAM Data Retention"/>
              <edc:SFRFieldDef edc:cname="DRTSWOK" edc:nzwidth="0x1" edc:desc="DRT Switch OK"/>
              <edc:SFRFieldDef edc:cname="Res" edc:nzwidth="0x1" edc:desc="Reserved Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="PWRCTRL" edc:cname="DRTRAM1" edc:nzwidth="0x8" edc:access="--nn----" edc:impl="0x30" edc:_addr="0x134">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWRCTRL">
              <edc:AdjustPoint edc:offset="0x4"/>
              <edc:SFRFieldDef edc:cname="ENDRT" edc:nzwidth="0x1" edc:desc="Enable SRAM Data Retention"/>
              <edc:SFRFieldDef edc:cname="DRTSWOK" edc:nzwidth="0x1" edc:desc="DRT Switch OK"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="PWRCTRL" edc:cname="DRTRAM0" edc:nzwidth="0x8" edc:access="--nn----" edc:impl="0x30" edc:_addr="0x135">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWRCTRL">
              <edc:AdjustPoint edc:offset="0x4"/>
              <edc:SFRFieldDef edc:cname="ENDRT" edc:nzwidth="0x1" edc:desc="Enable SRAM Data Retention"/>
              <edc:SFRFieldDef edc:cname="DRTSWOK" edc:nzwidth="0x1" edc:desc="DRT Switch OK"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="PWRCTRL" edc:cname="DPDS0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x136">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWRCTRL">
              <edc:SFRFieldDef edc:cname="PBDRV" edc:nzwidth="0x2" edc:desc="Driver Strength Port B">
                <edc:SFRFieldSemantic edc:cname="PAD_IO_2MA" edc:desc="2 mA" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_4MA" edc:desc="4 mA" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_6MA" edc:desc="6 mA" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_8MA" edc:desc="8 mA" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="PDDRV" edc:nzwidth="0x2" edc:desc="Driver Strength Port D">
                <edc:SFRFieldSemantic edc:cname="PAD_IO_2MA" edc:desc="2 mA" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_4MA" edc:desc="4 mA" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_6MA" edc:desc="6 mA" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_8MA" edc:desc="8 mA" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="PEDRV" edc:nzwidth="0x2" edc:desc="Driver Strength Port E">
                <edc:SFRFieldSemantic edc:cname="PAD_IO_2MA" edc:desc="2 mA" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_4MA" edc:desc="4 mA" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_6MA" edc:desc="6 mA" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_8MA" edc:desc="8 mA" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="PFDRV" edc:nzwidth="0x2" edc:desc="Driver Strength Port F">
                <edc:SFRFieldSemantic edc:cname="PAD_IO_2MA" edc:desc="2 mA" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_4MA" edc:desc="4 mA" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_6MA" edc:desc="6 mA" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_8MA" edc:desc="8 mA" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="PWRCTRL" edc:cname="DPDS1" edc:nzwidth="0x8" edc:access="------nn" edc:impl="0x3" edc:_addr="0x137">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWRCTRL">
              <edc:SFRFieldDef edc:cname="PGDRV" edc:nzwidth="0x2" edc:desc="Driver Strength Port G">
                <edc:SFRFieldSemantic edc:cname="PAD_IO_2MA" edc:desc="2 mA" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_4MA" edc:desc="4 mA" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_6MA" edc:desc="6 mA" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="PAD_IO_8MA" edc:desc="8 mA" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="PARCR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x138">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="PARUFI" edc:nzwidth="0x1" edc:desc="Power Amplifier Ramp Up Frequency Inversion"/>
              <edc:SFRFieldDef edc:cname="PARDFI" edc:nzwidth="0x1" edc:desc="Power Amplifier Ramp Down Frequency Inversion"/>
              <edc:SFRFieldDef edc:cname="PALTU" edc:nzwidth="0x3" edc:desc="ext. PA Ramp Up Lead Time">
                <edc:SFRFieldSemantic edc:cname="PALTU_MINUS_3US" edc:desc="-3us" edc:when="(field &amp; 0x7) == 0"/>
                <edc:SFRFieldSemantic edc:cname="PALTU_MINUS_2US" edc:desc="-2us" edc:when="(field &amp; 0x7) == 1"/>
                <edc:SFRFieldSemantic edc:cname="PALTU_MINUS_1US" edc:desc="-1us" edc:when="(field &amp; 0x7) == 2"/>
                <edc:SFRFieldSemantic edc:cname="PALTU_0US" edc:desc="0us" edc:when="(field &amp; 0x7) == 3"/>
                <edc:SFRFieldSemantic edc:cname="PALTU_1US" edc:desc="1us" edc:when="(field &amp; 0x7) == 4"/>
                <edc:SFRFieldSemantic edc:cname="PALTU_2US" edc:desc="2us" edc:when="(field &amp; 0x7) == 5"/>
                <edc:SFRFieldSemantic edc:cname="PALTU_3US" edc:desc="3us" edc:when="(field &amp; 0x7) == 6"/>
                <edc:SFRFieldSemantic edc:cname="PALTU_4US" edc:desc="4us" edc:when="(field &amp; 0x7) == 7"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="PALTD" edc:nzwidth="0x3" edc:desc="ext. PA Ramp Down Lead Time">
                <edc:SFRFieldSemantic edc:cname="PALTD_MINUS_3US" edc:desc="-3us" edc:when="(field &amp; 0x7) == 0"/>
                <edc:SFRFieldSemantic edc:cname="PALTD_MINUS_2US" edc:desc="-2us" edc:when="(field &amp; 0x7) == 1"/>
                <edc:SFRFieldSemantic edc:cname="PALTD_MINUS_1US" edc:desc="-1us" edc:when="(field &amp; 0x7) == 2"/>
                <edc:SFRFieldSemantic edc:cname="PALTD_0US" edc:desc="0us" edc:when="(field &amp; 0x7) == 3"/>
                <edc:SFRFieldSemantic edc:cname="PALTD_1US" edc:desc="1us" edc:when="(field &amp; 0x7) == 4"/>
                <edc:SFRFieldSemantic edc:cname="PALTD_2US" edc:desc="2us" edc:when="(field &amp; 0x7) == 5"/>
                <edc:SFRFieldSemantic edc:cname="PALTD_3US" edc:desc="3us" edc:when="(field &amp; 0x7) == 6"/>
                <edc:SFRFieldSemantic edc:cname="PALTD_4US" edc:desc="4us" edc:when="(field &amp; 0x7) == 7"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="PWRCTRL" edc:cname="TRXPR" edc:nzwidth="0x8" edc:access="------nn" edc:impl="0x3" edc:_addr="0x139">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWRCTRL">
              <edc:SFRFieldDef edc:cname="TRXRST" edc:nzwidth="0x1" edc:desc="Force Transceiver Reset"/>
              <edc:SFRFieldDef edc:cname="SLPTR" edc:nzwidth="0x1" edc:desc="Multi-purpose Transceiver Control Bit"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x13A"/>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="AES_CTRL" edc:nzwidth="0x8" edc:access="n-n-nn--" edc:impl="0xAC" edc:_addr="0x13C">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:AdjustPoint edc:offset="0x2"/>
              <edc:SFRFieldDef edc:cname="AES_IM" edc:nzwidth="0x1" edc:desc="AES Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="AES_DIR" edc:nzwidth="0x1" edc:desc="Set AES Operation Direction">
                <edc:SFRFieldSemantic edc:cname="AES_DIR_ENC" edc:desc="AES operation is encryption." edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="AES_DIR_DEC" edc:desc="AES operation is decryption." edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="AES_MODE" edc:nzwidth="0x1" edc:desc="Set AES Operation Mode">
                <edc:SFRFieldSemantic edc:cname="AES_MODE_ECB" edc:desc="AES Mode is ECB (Electronic Code Book)." edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="AES_MODE_CBC" edc:desc="AES Mode is CBC (Cipher Block Chaining)." edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="AES_REQUEST" edc:nzwidth="0x1" edc:desc="Request AES Operation."/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="AES_STATUS" edc:nzwidth="0x8" edc:access="n------n" edc:impl="0x81" edc:_addr="0x13D">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="AES_DONE" edc:nzwidth="0x1" edc:desc="AES Operation Finished with Success"/>
              <edc:AdjustPoint edc:offset="0x6"/>
              <edc:SFRFieldDef edc:cname="AES_ER" edc:nzwidth="0x1" edc:desc="AES Operation Finished with Error"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="AES_STATE" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x13E">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="AES_STATE" edc:nzwidth="0x8" edc:desc="AES Plain and Cipher Text Buffer"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="AES_KEY" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x13F">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="AES_KEY" edc:nzwidth="0x8" edc:desc="AES Encryption/Decryption Key Buffer"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0x140"/>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="TRX_STATUS" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x141">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="TRX_STATUS" edc:nzwidth="0x5" edc:desc="Transceiver Main Status">
                <edc:SFRFieldSemantic edc:cname="P_ON" edc:desc="P_ON" edc:when="(field &amp; 0x1F) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="BUSY_RX" edc:desc="BUSY_RX" edc:when="(field &amp; 0x1F) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="BUSY_TX" edc:desc="BUSY_TX" edc:when="(field &amp; 0x1F) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="RX_ON" edc:desc="RX_ON" edc:when="(field &amp; 0x1F) == 0x06"/>
                <edc:SFRFieldSemantic edc:cname="TRX_OFF" edc:desc="TRX_OFF" edc:when="(field &amp; 0x1F) == 0x08"/>
                <edc:SFRFieldSemantic edc:cname="PLL_ON" edc:desc="PLL_ON" edc:when="(field &amp; 0x1F) == 0x09"/>
                <edc:SFRFieldSemantic edc:cname="SLEEP" edc:desc="SLEEP" edc:when="(field &amp; 0x1F) == 0x0F"/>
                <edc:SFRFieldSemantic edc:cname="BUSY_RX_AACK" edc:desc="BUSY_RX_AACK" edc:when="(field &amp; 0x1F) == 0x11"/>
                <edc:SFRFieldSemantic edc:cname="BUSY_TX_ARET" edc:desc="BUSY_TX_ARET" edc:when="(field &amp; 0x1F) == 0x12"/>
                <edc:SFRFieldSemantic edc:cname="RX_AACK_ON" edc:desc="RX_AACK_ON" edc:when="(field &amp; 0x1F) == 0x16"/>
                <edc:SFRFieldSemantic edc:cname="TX_ARET_ON" edc:desc="TX_ARET_ON" edc:when="(field &amp; 0x1F) == 0x19"/>
                <edc:SFRFieldSemantic edc:cname="STATE_TRANSITION_IN_PROGRESS" edc:desc="STATE_TRANSITION_IN_PROGRESS" edc:when="(field &amp; 0x1F) == 0x1F"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="TST_STATUS" edc:nzwidth="0x1" edc:desc="Test mode status">
                <edc:SFRFieldSemantic edc:cname="TST_DISABLED" edc:desc="Test mode is disabled." edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TST_ENABLED" edc:desc="Test mode is active." edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="CCA_STATUS" edc:nzwidth="0x1" edc:desc="CCA Status Result">
                <edc:SFRFieldSemantic edc:cname="CCA_BUSY" edc:desc="Channel indicated as busy." edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="CCA_IDLE" edc:desc="Channel indicated as idle." edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="CCA_DONE" edc:nzwidth="0x1" edc:desc="CCA Algorithm Status">
                <edc:SFRFieldSemantic edc:cname="CCA_NOT_FIN" edc:desc="CCA calculation not finished" edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="CCA_FIN" edc:desc="CCA calculation finished" edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="TRX_STATE" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x142">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="TRX_CMD" edc:nzwidth="0x5" edc:desc="State Control Command">
                <edc:SFRFieldSemantic edc:cname="CMD_NOP" edc:desc="NOP" edc:when="(field &amp; 0x1F) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="CMD_TX_START" edc:desc="TX_START" edc:when="(field &amp; 0x1F) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="CMD_FORCE_TRX_OFF" edc:desc="FORCE_TRX_OFF" edc:when="(field &amp; 0x1F) == 0x03"/>
                <edc:SFRFieldSemantic edc:cname="CMD_FORCE_PLL_ON" edc:desc="FORCE_PLL_ON" edc:when="(field &amp; 0x1F) == 0x04"/>
                <edc:SFRFieldSemantic edc:cname="CMD_RX_ON" edc:desc="RX_ON" edc:when="(field &amp; 0x1F) == 0x06"/>
                <edc:SFRFieldSemantic edc:cname="CMD_TRX_OFF" edc:desc="TRX_OFF" edc:when="(field &amp; 0x1F) == 0x08"/>
                <edc:SFRFieldSemantic edc:cname="CMD_PLL_ON" edc:desc="PLL_ON (TX_ON)" edc:when="(field &amp; 0x1F) == 0x09"/>
                <edc:SFRFieldSemantic edc:cname="CMD_RX_AACK_ON" edc:desc="RX_AACK_ON" edc:when="(field &amp; 0x1F) == 0x16"/>
                <edc:SFRFieldSemantic edc:cname="CMD_TX_ARET_ON" edc:desc="TX_ARET_ON" edc:when="(field &amp; 0x1F) == 0x19"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="TRAC_STATUS" edc:nzwidth="0x3" edc:desc="Transaction Status">
                <edc:SFRFieldSemantic edc:cname="TRAC_SUCCESS" edc:desc="SUCCESS (RX_AACK, TX_ARET)" edc:when="(field &amp; 0x7) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TRAC_SUCCESS_DATA_PENDING" edc:desc="SUCCESS_DATA_PENDING (TX_ARET)" edc:when="(field &amp; 0x7) == 1"/>
                <edc:SFRFieldSemantic edc:cname="TRAC_SUCCESS_WAIT_FOR_ACK" edc:desc="SUCCESS_WAIT_FOR_ACK (RX_AACK)" edc:when="(field &amp; 0x7) == 2"/>
                <edc:SFRFieldSemantic edc:cname="TRAC_CHANNEL_ACCESS_FAILURE" edc:desc="CHANNEL_ACCESS_FAILURE (TX_ARET)" edc:when="(field &amp; 0x7) == 3"/>
                <edc:SFRFieldSemantic edc:cname="TRAC_NO_ACK" edc:desc="NO_ACK (TX_ARET)" edc:when="(field &amp; 0x7) == 5"/>
                <edc:SFRFieldSemantic edc:cname="TRAC_INVALID" edc:desc="INVALID (RX_AACK, TX_ARET)" edc:when="(field &amp; 0x7) == 7"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="TRX_CTRL_0" edc:nzwidth="0x8" edc:access="nnnn----" edc:impl="0xF0" edc:_addr="0x143">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:AdjustPoint edc:offset="0x4"/>
              <edc:SFRFieldDef edc:cname="PMU_IF_INV" edc:nzwidth="0x1" edc:desc="PMU IF Inverse"/>
              <edc:SFRFieldDef edc:cname="PMU_START" edc:nzwidth="0x1" edc:desc="Start of Phase Measurement Unit"/>
              <edc:SFRFieldDef edc:cname="PMU_EN" edc:nzwidth="0x1" edc:desc="Enable Phase Measurement Unit"/>
              <edc:SFRFieldDef edc:cname="Res7" edc:nzwidth="0x1" edc:desc="Reserved"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="TRX_CTRL_1" edc:nzwidth="0x8" edc:access="nnnn----" edc:impl="0xF0" edc:_addr="0x144">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:AdjustPoint edc:offset="0x4"/>
              <edc:SFRFieldDef edc:cname="PLL_TX_FLT" edc:nzwidth="0x1" edc:desc="Enable PLL TX filter"/>
              <edc:SFRFieldDef edc:cname="TX_AUTO_CRC_ON" edc:nzwidth="0x1" edc:desc="Enable Automatic CRC Calculation"/>
              <edc:SFRFieldDef edc:cname="IRQ_2_EXT_EN" edc:nzwidth="0x1" edc:desc="Connect Frame Start IRQ to TC1"/>
              <edc:SFRFieldDef edc:cname="PA_EXT_EN" edc:nzwidth="0x1" edc:desc="External PA support enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="PHY_TX_PWR" edc:nzwidth="0x8" edc:access="----nnnn" edc:impl="0xF" edc:_addr="0x145">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="TX_PWR" edc:nzwidth="0x4" edc:desc="Transmit Power Setting">
                <edc:SFRFieldSemantic edc:cname="3_5_DBM" edc:desc="3.5 dBm" edc:when="(field &amp; 0xF) == 0"/>
                <edc:SFRFieldSemantic edc:cname="3_3_DBM" edc:desc="3.3 dBm" edc:when="(field &amp; 0xF) == 1"/>
                <edc:SFRFieldSemantic edc:cname="2_8_DBM" edc:desc="2.8 dBm" edc:when="(field &amp; 0xF) == 2"/>
                <edc:SFRFieldSemantic edc:cname="2_3_DBM" edc:desc="2.3 dBm" edc:when="(field &amp; 0xF) == 3"/>
                <edc:SFRFieldSemantic edc:cname="1_8_DBM" edc:desc="1.8 dBm" edc:when="(field &amp; 0xF) == 4"/>
                <edc:SFRFieldSemantic edc:cname="1_2_DBM" edc:desc="1.2 dBm" edc:when="(field &amp; 0xF) == 5"/>
                <edc:SFRFieldSemantic edc:cname="0_5_DBM" edc:desc="0.5 dBm" edc:when="(field &amp; 0xF) == 6"/>
                <edc:SFRFieldSemantic edc:cname="_0_5_DBM" edc:desc="-0.5 dBm" edc:when="(field &amp; 0xF) == 7"/>
                <edc:SFRFieldSemantic edc:cname="_1_5_DBM" edc:desc="-1.5 dBm" edc:when="(field &amp; 0xF) == 8"/>
                <edc:SFRFieldSemantic edc:cname="_2_5_DBM" edc:desc="-2.5 dBm" edc:when="(field &amp; 0xF) == 9"/>
                <edc:SFRFieldSemantic edc:cname="_3_5_DBM" edc:desc="-3.5 dBm" edc:when="(field &amp; 0xF) == 10"/>
                <edc:SFRFieldSemantic edc:cname="_4_5_DBM" edc:desc="-4.5 dBm" edc:when="(field &amp; 0xF) == 11"/>
                <edc:SFRFieldSemantic edc:cname="_6_5_DBM" edc:desc="-6.5 dBm" edc:when="(field &amp; 0xF) == 12"/>
                <edc:SFRFieldSemantic edc:cname="_8_5_DBM" edc:desc="-8.5 dBm" edc:when="(field &amp; 0xF) == 13"/>
                <edc:SFRFieldSemantic edc:cname="_11_5_DBM" edc:desc="-11.5 dBm" edc:when="(field &amp; 0xF) == 14"/>
                <edc:SFRFieldSemantic edc:cname="_16_5_DBM" edc:desc="-16.5 dBm" edc:when="(field &amp; 0xF) == 15"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="PHY_RSSI" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x146">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="RSSI" edc:nzwidth="0x5" edc:desc="Receiver Signal Strength Indicator">
                <edc:SFRFieldSemantic edc:cname="RSSI_MIN" edc:desc="Minimum RSSI value: P(RF) &lt; -90 dBm" edc:when="(field &amp; 0x1F) == 0"/>
                <edc:SFRFieldSemantic edc:cname="RSSI_MIN_PLUS_3dB" edc:desc="P(RF) = RSSI_BASE_VAL+3 · (RSSI-1) [dBm]" edc:when="(field &amp; 0x1F) == 1"/>
                <edc:SFRFieldSemantic edc:cname="VAL_2" edc:desc="..." edc:when="(field &amp; 0x1F) == 2"/>
                <edc:SFRFieldSemantic edc:cname="RSSI_MAX" edc:desc="Maximum RSSI value: P(RF) ≥ -10 dBm" edc:when="(field &amp; 0x1F) == 28"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="RND_VALUE" edc:nzwidth="0x2" edc:desc="Random Value"/>
              <edc:SFRFieldDef edc:cname="RX_CRC_VALID" edc:nzwidth="0x1" edc:desc="Received Frame CRC Status">
                <edc:SFRFieldSemantic edc:cname="CRC_INVALID" edc:desc="CRC (FCS) not valid" edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="CRC_VALID" edc:desc="CRC (FCS) valid" edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="PHY_ED_LEVEL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x147">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="ED_LEVEL" edc:nzwidth="0x8" edc:desc="Energy Detection Level">
                <edc:SFRFieldSemantic edc:cname="ED_MIN" edc:desc="Minimum result of last ED measurement" edc:when="(field &amp; 0xFF) == 0x00"/>
                <edc:SFRFieldSemantic edc:cname="ED_MIN_PLUS_1dB" edc:desc="P(RF) = RSSI_BASE_VAL+ED [dBm]" edc:when="(field &amp; 0xFF) == 0x01"/>
                <edc:SFRFieldSemantic edc:cname="VAL_0x02" edc:desc="..." edc:when="(field &amp; 0xFF) == 0x02"/>
                <edc:SFRFieldSemantic edc:cname="ED_MAX" edc:desc="Maximum result of last ED measurement" edc:when="(field &amp; 0xFF) == 0x54"/>
                <edc:SFRFieldSemantic edc:cname="ED_RESET" edc:desc="Reset value" edc:when="(field &amp; 0xFF) == 0xFF"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="PHY_CC_CCA" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x148">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="CHANNEL" edc:nzwidth="0x5" edc:desc="RX/TX Channel Selection">
                <edc:SFRFieldSemantic edc:cname="F_2405MHZ" edc:desc="2405 MHz" edc:when="(field &amp; 0x1F) == 11"/>
                <edc:SFRFieldSemantic edc:cname="F_2410MHZ" edc:desc="2410 MHz" edc:when="(field &amp; 0x1F) == 12"/>
                <edc:SFRFieldSemantic edc:cname="F_2415MHZ" edc:desc="2415 MHz" edc:when="(field &amp; 0x1F) == 13"/>
                <edc:SFRFieldSemantic edc:cname="F_2420MHZ" edc:desc="2420 MHz" edc:when="(field &amp; 0x1F) == 14"/>
                <edc:SFRFieldSemantic edc:cname="F_2425MHZ" edc:desc="2425 MHz" edc:when="(field &amp; 0x1F) == 15"/>
                <edc:SFRFieldSemantic edc:cname="F_2430MHZ" edc:desc="2430 MHz" edc:when="(field &amp; 0x1F) == 16"/>
                <edc:SFRFieldSemantic edc:cname="F_2435MHZ" edc:desc="2435 MHz" edc:when="(field &amp; 0x1F) == 17"/>
                <edc:SFRFieldSemantic edc:cname="F_2440MHZ" edc:desc="2440 MHz" edc:when="(field &amp; 0x1F) == 18"/>
                <edc:SFRFieldSemantic edc:cname="F_2445MHZ" edc:desc="2445 MHz" edc:when="(field &amp; 0x1F) == 19"/>
                <edc:SFRFieldSemantic edc:cname="F_2450MHZ" edc:desc="2450 MHz" edc:when="(field &amp; 0x1F) == 20"/>
                <edc:SFRFieldSemantic edc:cname="F_2455MHZ" edc:desc="2455 MHz" edc:when="(field &amp; 0x1F) == 21"/>
                <edc:SFRFieldSemantic edc:cname="F_2460MHZ" edc:desc="2460 MHz" edc:when="(field &amp; 0x1F) == 22"/>
                <edc:SFRFieldSemantic edc:cname="F_2465MHZ" edc:desc="2465 MHz" edc:when="(field &amp; 0x1F) == 23"/>
                <edc:SFRFieldSemantic edc:cname="F_2470MHZ" edc:desc="2470 MHz" edc:when="(field &amp; 0x1F) == 24"/>
                <edc:SFRFieldSemantic edc:cname="F_2475MHZ" edc:desc="2475 MHz" edc:when="(field &amp; 0x1F) == 25"/>
                <edc:SFRFieldSemantic edc:cname="F_2480MHZ" edc:desc="2480 MHz" edc:when="(field &amp; 0x1F) == 26"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="CCA_MODE" edc:nzwidth="0x2" edc:desc="Select CCA Measurement Mode">
                <edc:SFRFieldSemantic edc:cname="CCA_CS_OR_ED" edc:desc="Mode 3a, Carrier sense OR energy above threshold" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="CCA_ED" edc:desc="Mode 1, Energy above threshold" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="CCA_CS" edc:desc="Mode 2, Carrier sense only" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="CCA_CS_AND_ED" edc:desc="Mode 3b, Carrier sense AND energy above threshold" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="CCA_REQUEST" edc:nzwidth="0x1" edc:desc="Manual CCA Measurement Request"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="CCA_THRES" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x149">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="CCA_ED_THRES" edc:nzwidth="0x4" edc:desc="ED Threshold Level for CCA Measurement"/>
              <edc:SFRFieldDef edc:cname="CCA_CS_THRES" edc:nzwidth="0x4" edc:desc="CS Threshold Level for CCA Measurement"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="RX_CTRL" edc:nzwidth="0x8" edc:access="----nnnn" edc:impl="0xF" edc:_addr="0x14A">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="PDT_THRES" edc:nzwidth="0x4" edc:desc="Receiver Sensitivity Control">
                <edc:SFRFieldSemantic edc:cname="PDT_THRES_ANT_DIV_OFF" edc:desc="Reset value, to be used if Antenna Diversity algorithm is disabled" edc:when="(field &amp; 0xF) == 0x7"/>
                <edc:SFRFieldSemantic edc:cname="PDT_THRES_ANT_DIV_ON" edc:desc="Recommended correlator threshold for Antenna Diversity operation" edc:when="(field &amp; 0xF) == 0x3"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="SFD_VALUE" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x14B">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="SFD_VALUE" edc:nzwidth="0x8" edc:desc="Start of Frame Delimiter Value">
                <edc:SFRFieldSemantic edc:cname="IEEE_SFD" edc:desc="IEEE 802.15.4 compliant value of the SFD" edc:when="(field &amp; 0xFF) == 0xA7"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="TRX_CTRL_2" edc:nzwidth="0x8" edc:access="n-----nn" edc:impl="0x83" edc:_addr="0x14C">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="OQPSK_DATA_RATE" edc:nzwidth="0x2" edc:desc="Data Rate Selection">
                <edc:SFRFieldSemantic edc:cname="RATE_250KB" edc:desc="250 kb/s (IEEE 802.15.4 compliant)" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="RATE_500KB" edc:desc="500 kb/s" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="RATE_1000KB" edc:desc="1000 kb/s" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="RATE_2000KB" edc:desc="2000 kb/s" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:AdjustPoint edc:offset="0x5"/>
              <edc:SFRFieldDef edc:cname="RX_SAFE_MODE" edc:nzwidth="0x1" edc:desc="RX Safe Mode"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="ANT_DIV" edc:nzwidth="0x8" edc:access="n---nnnn" edc:impl="0x8F" edc:_addr="0x14D">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="ANT_CTRL" edc:nzwidth="0x2" edc:desc="Static Antenna Diversity Switch Control">
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="ANT_1" edc:desc="Antenna 1: DIG1=H, DIG2=L" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="ANT_0" edc:desc="Antenna 0: DIG1=L, DIG2=H" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="ANT_RESET" edc:desc="Default value for ANT_EXT_SW_EN=0; Mandatory setting for applications not using Antenna Diversity" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="ANT_EXT_SW_EN" edc:nzwidth="0x1" edc:desc="Enable External Antenna Switch Control">
                <edc:SFRFieldSemantic edc:cname="ANT_DIV_EXT_SW_DIS" edc:desc="Antenna Diversity RF switch control disabled" edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="ANT_DIV_EXT_SW_EN" edc:desc="Antenna Diversity RF switch control enabled" edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="ANT_DIV_EN" edc:nzwidth="0x1" edc:desc="Enable Antenna Diversity">
                <edc:SFRFieldSemantic edc:cname="ANTENNA_DIVERSITY_ALGORITHM_DISABLED" edc:desc="Antenna Diversity algorithm disabled" edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="ANTENNA_DIVERSITY_ALGORITHM_ENABLED" edc:desc="Antenna Diversity algorithm enabled" edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:AdjustPoint edc:offset="0x3"/>
              <edc:SFRFieldDef edc:cname="ANT_SEL" edc:nzwidth="0x1" edc:desc="Antenna Diversity Antenna Status">
                <edc:SFRFieldSemantic edc:cname="ANTENNA_0" edc:desc="Antenna 0" edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="ANTENNA_1" edc:desc="Antenna 1" edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="IRQ_MASK" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x14E">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="PLL_LOCK_EN" edc:nzwidth="0x1" edc:desc="PLL Lock Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="PLL_UNLOCK_EN" edc:nzwidth="0x1" edc:desc="PLL Unlock Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="RX_START_EN" edc:nzwidth="0x1" edc:desc="RX_START Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="RX_END_EN" edc:nzwidth="0x1" edc:desc="RX_END Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="CCA_ED_DONE_EN" edc:nzwidth="0x1" edc:desc="End of ED Measurement Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="AMI_EN" edc:nzwidth="0x1" edc:desc="Address Match Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="TX_END_EN" edc:nzwidth="0x1" edc:desc="TX_END Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="AWAKE_EN" edc:nzwidth="0x1" edc:desc="Awake Interrupt Enable"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="IRQ_STATUS" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x14F">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="PLL_LOCK" edc:nzwidth="0x1" edc:desc="PLL Lock Interrupt Status"/>
              <edc:SFRFieldDef edc:cname="PLL_UNLOCK" edc:nzwidth="0x1" edc:desc="PLL Unlock Interrupt Status"/>
              <edc:SFRFieldDef edc:cname="RX_START" edc:nzwidth="0x1" edc:desc="RX_START Interrupt Status"/>
              <edc:SFRFieldDef edc:cname="RX_END" edc:nzwidth="0x1" edc:desc="RX_END Interrupt Status"/>
              <edc:SFRFieldDef edc:cname="CCA_ED_DONE" edc:nzwidth="0x1" edc:desc="End of ED Measurement Interrupt Status"/>
              <edc:SFRFieldDef edc:cname="AMI" edc:nzwidth="0x1" edc:desc="Address Match Interrupt Status"/>
              <edc:SFRFieldDef edc:cname="TX_END" edc:nzwidth="0x1" edc:desc="TX_END Interrupt Status"/>
              <edc:SFRFieldDef edc:cname="AWAKE" edc:nzwidth="0x1" edc:desc="Awake Interrupt Status"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="VREG_CTRL" edc:nzwidth="0x8" edc:access="nn--nn--" edc:impl="0xCC" edc:_addr="0x150">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:AdjustPoint edc:offset="0x2"/>
              <edc:SFRFieldDef edc:cname="DVDD_OK" edc:nzwidth="0x1" edc:desc="DVDD Supply Voltage Valid">
                <edc:SFRFieldSemantic edc:cname="DIGITAL_VOLTAGE_REGULATOR_DISABLED_OR_SUPPLY_VOLTAGE_NOT_STABLE" edc:desc="Digital voltage regulator disabled or supply voltage not stable" edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="DIGITAL_SUPPLY_VOLTAGE_HAS_SETTLED" edc:desc="Digital supply voltage has settled" edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="DVREG_EXT" edc:nzwidth="0x1" edc:desc="Use External DVDD Regulator">
                <edc:SFRFieldSemantic edc:cname="DVDD_INT" edc:desc="Internal DVDD voltage regulator for the digital section is enabled." edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="DVDD_EXT" edc:desc="Internal DVDD voltage regulator is disabled; use external regulated 1.8V supply voltage for the digital section." edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:AdjustPoint edc:offset="0x2"/>
              <edc:SFRFieldDef edc:cname="AVDD_OK" edc:nzwidth="0x1" edc:desc="AVDD Supply Voltage Valid">
                <edc:SFRFieldSemantic edc:cname="ANALOG_VOLTAGE_REGULATOR_DISABLED_OR_SUPPLY_VOLTAGE_NOT_STABLE" edc:desc="Analog voltage regulator disabled or supply voltage not stable" edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="ANALOG_SUPPLY_VOLTAGE_HAS_SETTLED" edc:desc="Analog supply voltage has settled" edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="AVREG_EXT" edc:nzwidth="0x1" edc:desc="Use External AVDD Regulator">
                <edc:SFRFieldSemantic edc:cname="AVDD_INT" edc:desc="Internal AVDD voltage regulator for the analog section is enabled." edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="AVDD_EXT" edc:desc="Internal AVDD voltage regulator is disabled; use external regulated 1.8V supply voltage for the analog section." edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="BATMON" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x151">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="BATMON_VTH" edc:nzwidth="0x4" edc:desc="Battery Monitor Threshold Voltage">
                <edc:SFRFieldSemantic edc:cname="2_550V_1_70V_BATMON_HR_1_0" edc:desc="2.550V / 1.70V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="2_625V_1_75V_BATMON_HR_1_0" edc:desc="2.625V / 1.75V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="2_700V_1_80V_BATMON_HR_1_0" edc:desc="2.700V / 1.80V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="2_775V_1_85V_BATMON_HR_1_0" edc:desc="2.775V / 1.85V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0x3"/>
                <edc:SFRFieldSemantic edc:cname="2_850V_1_90V_BATMON_HR_1_0" edc:desc="2.850V / 1.90V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0x4"/>
                <edc:SFRFieldSemantic edc:cname="2_925V_1_95V_BATMON_HR_1_0" edc:desc="2.925V / 1.95V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0x5"/>
                <edc:SFRFieldSemantic edc:cname="3_000V_2_00V_BATMON_HR_1_0" edc:desc="3.000V / 2.00V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0x6"/>
                <edc:SFRFieldSemantic edc:cname="3_075V_2_05V_BATMON_HR_1_0" edc:desc="3.075V / 2.05V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0x7"/>
                <edc:SFRFieldSemantic edc:cname="3_150V_2_10V_BATMON_HR_1_0" edc:desc="3.150V / 2.10V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0x8"/>
                <edc:SFRFieldSemantic edc:cname="3_225V_2_15V_BATMON_HR_1_0" edc:desc="3.225V / 2.15V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0x9"/>
                <edc:SFRFieldSemantic edc:cname="3_300V_2_20V_BATMON_HR_1_0" edc:desc="3.300V / 2.20V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0xA"/>
                <edc:SFRFieldSemantic edc:cname="3_375V_2_25V_BATMON_HR_1_0" edc:desc="3.375V / 2.25V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0xB"/>
                <edc:SFRFieldSemantic edc:cname="3_450V_2_30V_BATMON_HR_1_0" edc:desc="3.450V / 2.30V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0xC"/>
                <edc:SFRFieldSemantic edc:cname="3_525V_2_35V_BATMON_HR_1_0" edc:desc="3.525V / 2.35V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0xD"/>
                <edc:SFRFieldSemantic edc:cname="3_600V_2_40V_BATMON_HR_1_0" edc:desc="3.600V / 2.40V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0xE"/>
                <edc:SFRFieldSemantic edc:cname="3_675V_2_45V_BATMON_HR_1_0" edc:desc="3.675V / 2.45V (BATMON_HR=1/0)" edc:when="(field &amp; 0xF) == 0xF"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="BATMON_HR" edc:nzwidth="0x1" edc:desc="Battery Monitor Voltage Range">
                <edc:SFRFieldSemantic edc:cname="BATMON_HR_DIS" edc:desc="Enables the low range, see BATMON_VTH" edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="BATMON_HR_EN" edc:desc="Enables the high range, see BATMON_VTH" edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="BATMON_OK" edc:nzwidth="0x1" edc:desc="Battery Monitor Status">
                <edc:SFRFieldSemantic edc:cname="THE_BATTERY_VOLTAGE_IS_BELOW_THE_THRESHOLD" edc:desc="The battery voltage is below the threshold." edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="THE_BATTERY_VOLTAGE_IS_ABOVE_THE_THRESHOLD" edc:desc="The battery voltage is above the threshold." edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="BAT_LOW_EN" edc:nzwidth="0x1" edc:desc="Battery Monitor Interrupt Enable"/>
              <edc:SFRFieldDef edc:cname="BAT_LOW" edc:nzwidth="0x1" edc:desc="Battery Monitor Interrupt Status"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="XOSC_CTRL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x152">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="XTAL_TRIM" edc:nzwidth="0x4" edc:desc="Crystal Oscillator Load Capacitance Trimming">
                <edc:SFRFieldSemantic edc:cname="XTAL_TRIM_MIN" edc:desc="0.0 pF, trimming capacitors disconnected" edc:when="(field &amp; 0xF) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="VAL_0x1" edc:desc="0.3 pF, trimming capacitor switched on" edc:when="(field &amp; 0xF) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="VAL_0x2" edc:desc="..." edc:when="(field &amp; 0xF) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="XTAL_TRIM_MAX" edc:desc="4.5 pF, trimming capacitor switched on" edc:when="(field &amp; 0xF) == 0xF"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="XTAL_MODE" edc:nzwidth="0x4" edc:desc="Crystal Oscillator Operating Mode">
                <edc:SFRFieldSemantic edc:cname="INTERNAL_CRYSTAL_OSCILLATOR_DISABLED_USE_EXTERNAL_REFERENCE_FREQUENCY" edc:desc="Internal crystal oscillator disabled; use external reference frequency." edc:when="(field &amp; 0xF) == 0x4"/>
                <edc:SFRFieldSemantic edc:cname="INTERNAL_CRYSTAL_OSCILLATOR_ENABLED_AMPLITUDE_REGULATION_OF_OSCILLATION_ENABLED" edc:desc="Internal crystal oscillator enabled; amplitude regulation of oscillation enabled." edc:when="(field &amp; 0xF) == 0xF"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="CC_CTRL_0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x153">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="CC_NUMBER" edc:nzwidth="0x8" edc:desc="Channel Number"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="CC_CTRL_1" edc:nzwidth="0x8" edc:access="----nnnn" edc:impl="0xF" edc:_addr="0x154">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="CC_BAND" edc:nzwidth="0x4" edc:desc="Channel Band"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="RX_SYN" edc:nzwidth="0x8" edc:access="nn--nnnn" edc:impl="0xCF" edc:_addr="0x155">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="RX_PDT_LEVEL" edc:nzwidth="0x4" edc:desc="Reduce Receiver Sensitivity">
                <edc:SFRFieldSemantic edc:cname="RX_PDT_LEVEL_MIN" edc:desc="RX_THRES ≤ RSSI_BASE_VAL (Reset value); RSSI value not considered" edc:when="(field &amp; 0xF) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="VAL_0x1" edc:desc="RX_THRES &gt; RSSI_BASE_VAL + 0 · 3; RSSI &gt; -90 dBm" edc:when="(field &amp; 0xF) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="VAL_0x2" edc:desc="..." edc:when="(field &amp; 0xF) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="VAL_0xE" edc:desc="RX_THRES &gt; RSSI_BASE_VAL + 13 · 3; RSSI &gt; -51 dBm" edc:when="(field &amp; 0xF) == 0xE"/>
                <edc:SFRFieldSemantic edc:cname="RX_PDT_LEVEL_MAX" edc:desc="RX_THRES &gt; RSSI_BASE_VAL + 14 · 3; RSSI &gt; -48 dBm" edc:when="(field &amp; 0xF) == 0xF"/>
              </edc:SFRFieldDef>
              <edc:AdjustPoint edc:offset="0x2"/>
              <edc:SFRFieldDef edc:cname="RX_OVERRIDE" edc:nzwidth="0x1" edc:desc="Receiver Override Function"/>
              <edc:SFRFieldDef edc:cname="RX_PDT_DIS" edc:nzwidth="0x1" edc:desc="Prevent Frame Reception"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="TRX_RPC" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x156">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="XAH_RPC_EN" edc:nzwidth="0x1" edc:desc="Smart Receiving in Extended Operating Modes Enable"/>
              <edc:SFRFieldDef edc:cname="IPAN_RPC_EN" edc:nzwidth="0x1" edc:desc="Smart Receiving Mode IPAN Handling Enable"/>
              <edc:SFRFieldDef edc:cname="Res0" edc:nzwidth="0x1" edc:desc="Reserved"/>
              <edc:SFRFieldDef edc:cname="PLL_RPC_EN" edc:nzwidth="0x1" edc:desc="PLL Smart Receiving Mode Enable"/>
              <edc:SFRFieldDef edc:cname="PDT_RPC_EN" edc:nzwidth="0x1" edc:desc="Smart Receiving Mode Reduced Sensitivity Enable"/>
              <edc:SFRFieldDef edc:cname="RX_RPC_EN" edc:nzwidth="0x1" edc:desc="Reciver Smart Receiving Mode Enable"/>
              <edc:SFRFieldDef edc:cname="RX_RPC_CTRL" edc:nzwidth="0x2" edc:desc="Smart Receiving Mode Timing">
                <edc:SFRFieldSemantic edc:cname="ACTIVATES_MINIMUM_POWER_SAVING_BEHAVIOUR_FOR_SMART_RECEIVING_MODE" edc:desc="Activates minimum power saving behaviour for smart receiving mode" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="ACTIVATES_MAXIMUM_POWER_SAVING_BEHAVIOUR_FOR_SMART_RECEIVING_MODE" edc:desc="Activates maximum power saving behaviour for smart receiving mode" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="XAH_CTRL_1" edc:nzwidth="0x8" edc:access="--nn-nn-" edc:impl="0x36" edc:_addr="0x157">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="AACK_PROM_MODE" edc:nzwidth="0x1" edc:desc="Enable Promiscuous Mode"/>
              <edc:SFRFieldDef edc:cname="AACK_ACK_TIME" edc:nzwidth="0x1" edc:desc="Reduce Acknowledgment Time">
                <edc:SFRFieldSemantic edc:cname="AACK_ACK_TIME_12_SYM" edc:desc="12 symbols acknowledgment time" edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="AACK_ACK_TIME_2_SYM" edc:desc=" 2 symbols acknowledgment time" edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:AdjustPoint edc:offset="0x1"/>
              <edc:SFRFieldDef edc:cname="AACK_UPLD_RES_FT" edc:nzwidth="0x1" edc:desc="Process Reserved Frames"/>
              <edc:SFRFieldDef edc:cname="AACK_FLTR_RES_FT" edc:nzwidth="0x1" edc:desc="Filter Reserved Frames"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="FTN_CTRL" edc:nzwidth="0x8" edc:access="n-------" edc:impl="0x80" edc:_addr="0x158">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:AdjustPoint edc:offset="0x7"/>
              <edc:SFRFieldDef edc:cname="FTN_START" edc:nzwidth="0x1" edc:desc="Start Calibration Loop of Filter Tuning Network"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x1" edc:_addr="0x159"/>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="PLL_CF" edc:nzwidth="0x8" edc:access="n-------" edc:impl="0x80" edc:_addr="0x15A">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:AdjustPoint edc:offset="0x7"/>
              <edc:SFRFieldDef edc:cname="PLL_CF_START" edc:nzwidth="0x1" edc:desc="Start Center Frequency Calibration"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="PLL_DCU" edc:nzwidth="0x8" edc:access="n-------" edc:impl="0x80" edc:_addr="0x15B">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:AdjustPoint edc:offset="0x7"/>
              <edc:SFRFieldDef edc:cname="PLL_DCU_START" edc:nzwidth="0x1" edc:desc="Start Delay Cell Calibration"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="PART_NUM" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x15C">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="PART_NUM" edc:nzwidth="0x8" edc:desc="Part Number">
                <edc:SFRFieldSemantic edc:cname="P_ATmega128RFA1" edc:desc="ATmega128RFA1 part number" edc:when="(field &amp; 0xFF) == 0x83"/>
                <edc:SFRFieldSemantic edc:cname="P_RFA2" edc:desc="RFA2 family" edc:when="(field &amp; 0xFF) == 0x93"/>
                <edc:SFRFieldSemantic edc:cname="P_RFR2" edc:desc="RFR2 family" edc:when="(field &amp; 0xFF) == 0x94"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="VERSION_NUM" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x15D">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="VERSION_NUM" edc:nzwidth="0x8" edc:desc="Version Number">
                <edc:SFRFieldSemantic edc:cname="REV_A" edc:desc="Revision A" edc:when="(field &amp; 0xFF) == 12"/>
                <edc:SFRFieldSemantic edc:cname="REV_B" edc:desc="Revision B" edc:when="(field &amp; 0xFF) == 1"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAN_ID_0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x15E">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAN_ID_00" edc:nzwidth="0x1" edc:desc="Manufacturer ID (Low Byte)">
                <edc:SFRFieldSemantic edc:cname="ATMEL_BYTE_0" edc:desc="Atmel JEDEC manufacturer ID, bits [7:0] of 32 bit manufacturer ID: 00 00 00 1F" edc:when="(field &amp; 0x1) == 0x1f"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="MAN_ID_01" edc:nzwidth="0x1" edc:desc="Manufacturer ID (Low Byte)"/>
              <edc:SFRFieldDef edc:cname="MAN_ID_02" edc:nzwidth="0x1" edc:desc="Manufacturer ID (Low Byte)"/>
              <edc:SFRFieldDef edc:cname="MAN_ID_03" edc:nzwidth="0x1" edc:desc="Manufacturer ID (Low Byte)"/>
              <edc:SFRFieldDef edc:cname="MAN_ID_04" edc:nzwidth="0x1" edc:desc="Manufacturer ID (Low Byte)"/>
              <edc:SFRFieldDef edc:cname="MAN_ID_05" edc:nzwidth="0x1" edc:desc="Manufacturer ID (Low Byte)"/>
              <edc:SFRFieldDef edc:cname="MAN_ID_06" edc:nzwidth="0x1" edc:desc="Manufacturer ID (Low Byte)"/>
              <edc:SFRFieldDef edc:cname="MAN_ID_07" edc:nzwidth="0x1" edc:desc="Manufacturer ID (Low Byte)"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="MAN_ID_1" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x15F">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MAN_ID_" edc:nzwidth="0x8" edc:desc="Manufacturer ID (High Byte)">
                <edc:SFRFieldSemantic edc:cname="ATMEL_BYTE_1" edc:desc="Atmel JEDEC manufacturer ID, bits [15:8] of 32 bit manufacturer ID: 00 00 00 1F" edc:when="(field &amp; 0xFF) == 0x00"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="SHORT_ADDR_0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x160">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="SHORT_ADDR_00" edc:nzwidth="0x1" edc:desc="MAC Short Address"/>
              <edc:SFRFieldDef edc:cname="SHORT_ADDR_01" edc:nzwidth="0x1" edc:desc="MAC Short Address"/>
              <edc:SFRFieldDef edc:cname="SHORT_ADDR_02" edc:nzwidth="0x1" edc:desc="MAC Short Address"/>
              <edc:SFRFieldDef edc:cname="SHORT_ADDR_03" edc:nzwidth="0x1" edc:desc="MAC Short Address"/>
              <edc:SFRFieldDef edc:cname="SHORT_ADDR_04" edc:nzwidth="0x1" edc:desc="MAC Short Address"/>
              <edc:SFRFieldDef edc:cname="SHORT_ADDR_05" edc:nzwidth="0x1" edc:desc="MAC Short Address"/>
              <edc:SFRFieldDef edc:cname="SHORT_ADDR_06" edc:nzwidth="0x1" edc:desc="MAC Short Address"/>
              <edc:SFRFieldDef edc:cname="SHORT_ADDR_07" edc:nzwidth="0x1" edc:desc="MAC Short Address"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="SHORT_ADDR_1" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x161">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="SHORT_ADDR_" edc:nzwidth="0x8" edc:desc="MAC Short Address"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="PAN_ID_0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x162">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="PAN_ID_00" edc:nzwidth="0x1" edc:desc="MAC Personal Area Network ID"/>
              <edc:SFRFieldDef edc:cname="PAN_ID_01" edc:nzwidth="0x1" edc:desc="MAC Personal Area Network ID"/>
              <edc:SFRFieldDef edc:cname="PAN_ID_02" edc:nzwidth="0x1" edc:desc="MAC Personal Area Network ID"/>
              <edc:SFRFieldDef edc:cname="PAN_ID_03" edc:nzwidth="0x1" edc:desc="MAC Personal Area Network ID"/>
              <edc:SFRFieldDef edc:cname="PAN_ID_04" edc:nzwidth="0x1" edc:desc="MAC Personal Area Network ID"/>
              <edc:SFRFieldDef edc:cname="PAN_ID_05" edc:nzwidth="0x1" edc:desc="MAC Personal Area Network ID"/>
              <edc:SFRFieldDef edc:cname="PAN_ID_06" edc:nzwidth="0x1" edc:desc="MAC Personal Area Network ID"/>
              <edc:SFRFieldDef edc:cname="PAN_ID_07" edc:nzwidth="0x1" edc:desc="MAC Personal Area Network ID"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="PAN_ID_1" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x163">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="PAN_ID_" edc:nzwidth="0x8" edc:desc="MAC Personal Area Network ID"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="IEEE_ADDR_0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x164">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_00" edc:nzwidth="0x1" edc:desc="MAC IEEE Address"/>
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_01" edc:nzwidth="0x1" edc:desc="MAC IEEE Address"/>
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_02" edc:nzwidth="0x1" edc:desc="MAC IEEE Address"/>
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_03" edc:nzwidth="0x1" edc:desc="MAC IEEE Address"/>
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_04" edc:nzwidth="0x1" edc:desc="MAC IEEE Address"/>
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_05" edc:nzwidth="0x1" edc:desc="MAC IEEE Address"/>
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_06" edc:nzwidth="0x1" edc:desc="MAC IEEE Address"/>
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_07" edc:nzwidth="0x1" edc:desc="MAC IEEE Address"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="IEEE_ADDR_1" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x165">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_" edc:nzwidth="0x8" edc:desc="MAC IEEE Address"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="IEEE_ADDR_2" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x166">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_" edc:nzwidth="0x8" edc:desc="MAC IEEE Address"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="IEEE_ADDR_3" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x167">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_" edc:nzwidth="0x8" edc:desc="MAC IEEE Address"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="IEEE_ADDR_4" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x168">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_" edc:nzwidth="0x8" edc:desc="MAC IEEE Address"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="IEEE_ADDR_5" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x169">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_" edc:nzwidth="0x8" edc:desc="MAC IEEE Address"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="IEEE_ADDR_6" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x16A">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_" edc:nzwidth="0x8" edc:desc="MAC IEEE Address"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="IEEE_ADDR_7" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x16B">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="IEEE_ADDR_" edc:nzwidth="0x8" edc:desc="MAC IEEE Address"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="XAH_CTRL_0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x16C">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="SLOTTED_OPERATION" edc:nzwidth="0x1" edc:desc="Set Slotted Acknowledgment">
                <edc:SFRFieldSemantic edc:cname="SLOTTED_OP_DIS" edc:desc="The radio transceiver operates in unslotted mode. An acknowledgment frame is automatically sent if requested." edc:when="(field &amp; 0x1) == 0"/>
                <edc:SFRFieldSemantic edc:cname="SLOTTED_OP_EN" edc:desc="The transmission of an acknowledgment frame has to be controlled by the microcontroller." edc:when="(field &amp; 0x1) == 1"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="MAX_CSMA_RETRIES" edc:nzwidth="0x3" edc:desc="Maximum Number of CSMA-CA Procedure Repetition Attempts">
                <edc:SFRFieldSemantic edc:cname="NO_REPETITION_OF_CSMA_CA_PROCEDURE" edc:desc="No repetition of CSMA-CA procedure" edc:when="(field &amp; 0x7) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="ONE_REPETITION_OF_CSMA_CA_PROCEDURE" edc:desc="One repetition of CSMA-CA procedure" edc:when="(field &amp; 0x7) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="..." edc:when="(field &amp; 0x7) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="FIVE_REPETITIONS_HIGHEST_IEEE_802_15_4_COMPLIANT_VALUE" edc:desc="Five repetitions (highest IEEE 802.15.4 compliant value)" edc:when="(field &amp; 0x7) == 0x5"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="Reserved" edc:when="(field &amp; 0x7) == 0x6"/>
                <edc:SFRFieldSemantic edc:cname="IMMEDIATE_FRAME_RE_TRANSMISSION_WITHOUT_PERFORMING_CSMA_CA" edc:desc="Immediate frame re-transmission without performing CSMA-CA" edc:when="(field &amp; 0x7) == 0x7"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="MAX_FRAME_RETRIES" edc:nzwidth="0x4" edc:desc="Maximum Number of Frame Re-transmission Attempts">
                <edc:SFRFieldSemantic edc:cname="RETRANSMISSION_OF_FRAME_IS_NOT_ATTEMPTED" edc:desc="Retransmission of frame is not attempted." edc:when="(field &amp; 0xF) == 0x0"/>
                <edc:SFRFieldSemantic edc:cname="RETRANSMISSION_OF_FRAME_IS_ATTEMPTED_ONCE" edc:desc="Retransmission of frame is attempted once." edc:when="(field &amp; 0xF) == 0x1"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="..." edc:when="(field &amp; 0xF) == 0x2"/>
                <edc:SFRFieldSemantic edc:cname="RETRANSMISSION_OF_FRAME_IS_ATTEMPTED_15_TIMES" edc:desc="Retransmission of frame is attempted 15 times." edc:when="(field &amp; 0xF) == 0xF"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="CSMA_SEED_0" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x16D">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="CSMA_SEED_00" edc:nzwidth="0x1" edc:desc="Seed Value for CSMA Random Number Generator"/>
              <edc:SFRFieldDef edc:cname="CSMA_SEED_01" edc:nzwidth="0x1" edc:desc="Seed Value for CSMA Random Number Generator"/>
              <edc:SFRFieldDef edc:cname="CSMA_SEED_02" edc:nzwidth="0x1" edc:desc="Seed Value for CSMA Random Number Generator"/>
              <edc:SFRFieldDef edc:cname="CSMA_SEED_03" edc:nzwidth="0x1" edc:desc="Seed Value for CSMA Random Number Generator"/>
              <edc:SFRFieldDef edc:cname="CSMA_SEED_04" edc:nzwidth="0x1" edc:desc="Seed Value for CSMA Random Number Generator"/>
              <edc:SFRFieldDef edc:cname="CSMA_SEED_05" edc:nzwidth="0x1" edc:desc="Seed Value for CSMA Random Number Generator"/>
              <edc:SFRFieldDef edc:cname="CSMA_SEED_06" edc:nzwidth="0x1" edc:desc="Seed Value for CSMA Random Number Generator"/>
              <edc:SFRFieldDef edc:cname="CSMA_SEED_07" edc:nzwidth="0x1" edc:desc="Seed Value for CSMA Random Number Generator"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="CSMA_SEED_1" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x16E">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="CSMA_SEED_1" edc:nzwidth="0x3" edc:desc="Seed Value for CSMA Random Number Generator"/>
              <edc:SFRFieldDef edc:cname="AACK_I_AM_COORD" edc:nzwidth="0x1" edc:desc="Set Personal Area Network Coordinator"/>
              <edc:SFRFieldDef edc:cname="AACK_DIS_ACK" edc:nzwidth="0x1" edc:desc="Disable Acknowledgment Frame Transmission"/>
              <edc:SFRFieldDef edc:cname="AACK_SET_PD" edc:nzwidth="0x1" edc:desc="Set Frame Pending Sub-field"/>
              <edc:SFRFieldDef edc:cname="AACK_FVN_MODE" edc:nzwidth="0x2" edc:desc="Acknowledgment Frame Filter Mode">
                <edc:SFRFieldSemantic edc:cname="ACKNOWLEDGE_FRAMES_WITH_VERSION_NUMBER_0" edc:desc="Acknowledge frames with version number 0" edc:when="(field &amp; 0x3) == 0"/>
                <edc:SFRFieldSemantic edc:cname="ACKNOWLEDGE_FRAMES_WITH_VERSION_NUMBER_0_OR_1" edc:desc="Acknowledge frames with version number 0 or 1" edc:when="(field &amp; 0x3) == 1"/>
                <edc:SFRFieldSemantic edc:cname="ACKNOWLEDGE_FRAMES_WITH_VERSION_NUMBER_0_OR_1_OR_2" edc:desc="Acknowledge frames with version number 0 or 1 or 2" edc:when="(field &amp; 0x3) == 2"/>
                <edc:SFRFieldSemantic edc:cname="ACKNOWLEDGE_FRAMES_INDEPENDENT_OF_FRAME_VERSION_NUMBER" edc:desc="Acknowledge frames independent of frame version number" edc:when="(field &amp; 0x3) == 3"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="CSMA_BE" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x16F">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="MIN_BE" edc:nzwidth="0x4" edc:desc="Minimum Back-off Exponent">
                <edc:SFRFieldSemantic edc:cname="MINIMUM_VALUE_OF_MINIMUM_BACK_OFF_EXPONENT" edc:desc="Minimum value of minimum back-off exponent." edc:when="(field &amp; 0xF) == 0"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="..." edc:when="(field &amp; 0xF) == 1"/>
                <edc:SFRFieldSemantic edc:cname="MAXIMUM_VALUE_OF_MINIMUM_BACK_OFF_EXPONENT_MIN_BE_MUST_BE_SMALLER_OR_EQUAL_TO_MAX_BE" edc:desc="Maximum value of minimum back-off exponent. MIN_BE must be smaller or equal to MAX_BE." edc:when="(field &amp; 0xF) == 8"/>
              </edc:SFRFieldDef>
              <edc:SFRFieldDef edc:cname="MAX_BE" edc:nzwidth="0x4" edc:desc="Maximum Back-off Exponent">
                <edc:SFRFieldSemantic edc:cname="THIS_VALUE_IS_NOT_VALID_FOR_THE_MAXIMUM_BACK_OFF_EXPONENT" edc:desc="This value is not valid for the maximum back-off exponent." edc:when="(field &amp; 0xF) == 1"/>
                <edc:SFRFieldSemantic edc:cname="THIS_VALUE_IS_NOT_VALID_FOR_THE_MAXIMUM_BACK_OFF_EXPONENT" edc:desc="This value is not valid for the maximum back-off exponent." edc:when="(field &amp; 0xF) == 2"/>
                <edc:SFRFieldSemantic edc:cname="MINIMUM_IEEE_COMPLIANT_VALUE_FOR_THE_MAXIMUM_BACK_OFF_EXPONENT" edc:desc="Minimum, IEEE compliant value for the maximum back-off exponent." edc:when="(field &amp; 0xF) == 3"/>
                <edc:SFRFieldSemantic edc:cname="RESERVED" edc:desc="..." edc:when="(field &amp; 0xF) == 4"/>
                <edc:SFRFieldSemantic edc:cname="MAXIMUM_IEEE_COMPLIANT_VALUE_FOR_THE_MAXIMUM_BACK_OFF_EXPONENT" edc:desc="Maximum, IEEE compliant value for the maximum back-off exponent." edc:when="(field &amp; 0xF) == 8"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x6" edc:_addr="0x170"/>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="TST_CTRL_DIGI" edc:nzwidth="0x8" edc:access="----nnnn" edc:impl="0xF" edc:_addr="0x176">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="TST_CTRL_DIG" edc:nzwidth="0x4" edc:desc="Digital Test Controller Register">
                <edc:SFRFieldSemantic edc:cname="NORMAL_NO_TEST_IS_ACTIVE" edc:desc="NORMAL (no test is active)" edc:when="(field &amp; 0xF) == 0"/>
                <edc:SFRFieldSemantic edc:cname="TST_CONT_TX_CONTINUOUS_TRANSMIT" edc:desc="TST_CONT_TX (continuous transmit)" edc:when="(field &amp; 0xF) == 15"/>
              </edc:SFRFieldDef>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x177"/>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="TST_RX_LENGTH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x17B">
          <edc:SFRModeList>
            <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TRX24">
              <edc:SFRFieldDef edc:cname="RX_LENGTH" edc:nzwidth="0x8" edc:desc="Received Frame Length"/>
            </edc:SFRMode>
          </edc:SFRModeList>
        </edc:SFRDef>
        <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x17C"/>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="TRXFBST" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x180"/>
        <edc:AdjustPoint edc:offset="0x7E" edc:_addr="0x181"/>
        <edc:SFRDef ltx:memberofperipheral="TRX24" edc:cname="TRXFBEND" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:_addr="0x1FF"/>
      </edc:SFRDataSector>
      <edc:GPRDataSector edc:regionid="IRAM" edc:beginaddr="0x200" edc:endaddr="0x8200"/>
    </edc:RegardlessOfMode>
  </edc:DataSpace>
  <edc:DataFlashSpace edc:endaddr="0x2000" edc:magicoffset="0x810000"/>
  <edc:SignaturesSpace edc:magicoffset="0x840000">
    <edc:DeviceIDSector edc:regionid="SIGNATURES" edc:beginaddr="0x0" edc:endaddr="0x3" edc:value="0x1EA802" edc:rw="r"/>
  </edc:SignaturesSpace>
  <edc:UserSignaturesSpace>
    <edc:UserIDSector edc:regionid="USER_SIGNATURES" edc:beginaddr="0x100" edc:endaddr="0x400" edc:magicoffset="0x850000" atdf:pagesize="0x100" edc:rw="rw"/>
  </edc:UserSignaturesSpace>
  <edc:FusesSpace edc:magicoffset="0x820000">
    <edc:ConfigFuseSector edc:regionid="FUSES" edc:beginaddr="0x0" edc:endaddr="0x3" edc:magicoffset="0x820000" edc:rw="rw">
      <edc:DCRDef ltx:memberofperipheral="FUSE" edc:cname="LOW" edc:nzwidth="0x8" edc:impl="0xFF" edc:unused="0x0" edc:useinchecksum="0xFF" edc:factorydefault="0x62" edc:access="nnnnnnnn" edc:_addr="0x0">
        <edc:DCRModeList>
          <edc:DCRMode edc:id="DS.0" ltx:memberofperipheral="FUSE">
            <edc:DCRFieldDef edc:cname="CKSEL_SUT" edc:nzwidth="0x6" edc:desc="Select Clock Source : Start-up time">
              <edc:DCRFieldSemantic edc:cname="EXTCLK_6CK_0MS" edc:desc="Ext. Clock; Start-up time: 6 CK + 0 ms" edc:when="(field &amp; 0x3F) == 0x00"/>
              <edc:DCRFieldSemantic edc:cname="EXTCLK_6CK_4MS1" edc:desc="Ext. Clock; Start-up time: 6 CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x10"/>
              <edc:DCRFieldSemantic edc:cname="EXTCLK_6CK_65MS" edc:desc="Ext. Clock; Start-up time: 6 CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x20"/>
              <edc:DCRFieldSemantic edc:cname="INTRCOSC_6CK_0MS" edc:desc="Int. RC Osc.; Start-up time: 6 CK + 0 ms" edc:when="(field &amp; 0x3F) == 0x02"/>
              <edc:DCRFieldSemantic edc:cname="INTRCOSC_6CK_4MS1" edc:desc="Int. RC Osc.; Start-up time: 6 CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x12"/>
              <edc:DCRFieldSemantic edc:cname="INTRCOSC_6CK_65MS" edc:desc="Int. RC Osc.; Start-up time: 6 CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x22"/>
              <edc:DCRFieldSemantic edc:cname="INTRCOSC_128KHZ_6CK_0MS" edc:desc="Int. 128kHz RC Osc.; Start-up time: 6 CK + 0 ms" edc:when="(field &amp; 0x3F) == 0x03"/>
              <edc:DCRFieldSemantic edc:cname="INTRCOSC_128KHZ_6CK_4MS1" edc:desc="Int. 128kHz RC Osc.; Start-up time: 6 CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x13"/>
              <edc:DCRFieldSemantic edc:cname="INTRCOSC_128KHZ_6CK_65MS" edc:desc="Int. 128kHz RC Osc.; Start-up time: 6 CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x23"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_258CK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 258 CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x06"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_258CK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 258 CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x16"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_0MS" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 0 ms" edc:when="(field &amp; 0x3F) == 0x26"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x36"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x07"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_0MS" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 0 ms" edc:when="(field &amp; 0x3F) == 0x17"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x27"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x37"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_258CK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 258 CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x08"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_258CK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 258 CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x18"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_0MS" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 0 ms" edc:when="(field &amp; 0x3F) == 0x28"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x38"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x09"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_0MS" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 0 ms" edc:when="(field &amp; 0x3F) == 0x19"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x29"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x39"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_258CK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 258 CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x0A"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_258CK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 258 CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x1A"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_0MS" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 0 ms" edc:when="(field &amp; 0x3F) == 0x2A"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x3A"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x0B"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_0MS" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 0 ms" edc:when="(field &amp; 0x3F) == 0x1B"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x2B"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x3B"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_258CK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 258 CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x0C"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_258CK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 258 CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x1C"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_0MS" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 0 ms" edc:when="(field &amp; 0x3F) == 0x2C"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x3C"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x0D"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_0MS" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 0 ms" edc:when="(field &amp; 0x3F) == 0x1D"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x2D"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x3D"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_258CK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 258 CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x0E"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_258CK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 258 CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x1E"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_0MS" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 0 ms" edc:when="(field &amp; 0x3F) == 0x2E"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x3E"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_1KCK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 1K CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x0F"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_0MS" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 0 ms" edc:when="(field &amp; 0x3F) == 0x1F"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_4MS1" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 4.1 ms" edc:when="(field &amp; 0x3F) == 0x2F"/>
              <edc:DCRFieldSemantic edc:cname="TOSC_16KCK_65MS" edc:desc="Tranceiver Oscillator; Start-up time: 16K CK + 65 ms" edc:when="(field &amp; 0x3F) == 0x3F"/>
            </edc:DCRFieldDef>
            <edc:DCRFieldDef edc:cname="CKOUT" edc:nzwidth="0x1" edc:desc="Clock output on PORTE7">
              <edc:DCRFieldSemantic edc:cname="SET" edc:when="(field &amp; 0x1) == 0x0"/>
              <edc:DCRFieldSemantic edc:cname="CLEAR" edc:when="(field &amp; 0x1) == 0x1"/>
            </edc:DCRFieldDef>
            <edc:DCRFieldDef edc:cname="CKDIV8" edc:nzwidth="0x1" edc:desc="Divide clock by 8 internally">
              <edc:DCRFieldSemantic edc:cname="SET" edc:when="(field &amp; 0x1) == 0x0"/>
              <edc:DCRFieldSemantic edc:cname="CLEAR" edc:when="(field &amp; 0x1) == 0x1"/>
            </edc:DCRFieldDef>
          </edc:DCRMode>
        </edc:DCRModeList>
      </edc:DCRDef>
      <edc:DCRDef ltx:memberofperipheral="FUSE" edc:cname="HIGH" edc:nzwidth="0x8" edc:impl="0xFF" edc:unused="0x0" edc:useinchecksum="0xFF" edc:factorydefault="0x99" edc:access="nnnnnnnn" edc:_addr="0x1">
        <edc:DCRModeList>
          <edc:DCRMode edc:id="DS.0" ltx:memberofperipheral="FUSE">
            <edc:DCRFieldDef edc:cname="BOOTRST" edc:nzwidth="0x1" edc:desc="Boot Reset vector Enabled">
              <edc:DCRFieldSemantic edc:cname="SET" edc:when="(field &amp; 0x1) == 0x0"/>
              <edc:DCRFieldSemantic edc:cname="CLEAR" edc:when="(field &amp; 0x1) == 0x1"/>
            </edc:DCRFieldDef>
            <edc:DCRFieldDef edc:cname="BOOTSZ" edc:nzwidth="0x2" edc:desc="Select Boot Size">
              <edc:DCRFieldSemantic edc:cname="512W_1FE00" edc:desc="Boot Flash size=512 words start address=$1FE00" edc:when="(field &amp; 0x3) == 0x03"/>
              <edc:DCRFieldSemantic edc:cname="1024W_1FC00" edc:desc="Boot Flash size=1024 words start address=$1FC00" edc:when="(field &amp; 0x3) == 0x02"/>
              <edc:DCRFieldSemantic edc:cname="2048W_1F800" edc:desc="Boot Flash size=2048 words start address=$1F800" edc:when="(field &amp; 0x3) == 0x01"/>
              <edc:DCRFieldSemantic edc:cname="4096W_1F000" edc:desc="Boot Flash size=4096 words start address=$1F000" edc:when="(field &amp; 0x3) == 0x00"/>
            </edc:DCRFieldDef>
            <edc:DCRFieldDef edc:cname="EESAVE" edc:nzwidth="0x1" edc:desc="Preserve EEPROM through the Chip Erase cycle">
              <edc:DCRFieldSemantic edc:cname="SET" edc:when="(field &amp; 0x1) == 0x0"/>
              <edc:DCRFieldSemantic edc:cname="CLEAR" edc:when="(field &amp; 0x1) == 0x1"/>
            </edc:DCRFieldDef>
            <edc:DCRFieldDef edc:cname="WDTON" edc:nzwidth="0x1" edc:desc="Watchdog timer always on">
              <edc:DCRFieldSemantic edc:cname="SET" edc:when="(field &amp; 0x1) == 0x0"/>
              <edc:DCRFieldSemantic edc:cname="CLEAR" edc:when="(field &amp; 0x1) == 0x1"/>
            </edc:DCRFieldDef>
            <edc:DCRFieldDef edc:cname="SPIEN" edc:nzwidth="0x1" edc:desc="Serial program downloading (SPI) enabled">
              <edc:DCRFieldSemantic edc:cname="SET" edc:when="(field &amp; 0x1) == 0x0"/>
              <edc:DCRFieldSemantic edc:cname="CLEAR" edc:when="(field &amp; 0x1) == 0x1"/>
            </edc:DCRFieldDef>
            <edc:DCRFieldDef edc:cname="JTAGEN" edc:nzwidth="0x1" edc:desc="JTAG Interface Enabled">
              <edc:DCRFieldSemantic edc:cname="SET" edc:when="(field &amp; 0x1) == 0x0"/>
              <edc:DCRFieldSemantic edc:cname="CLEAR" edc:when="(field &amp; 0x1) == 0x1"/>
            </edc:DCRFieldDef>
            <edc:DCRFieldDef edc:cname="OCDEN" edc:nzwidth="0x1" edc:desc="On-Chip Debug Enabled">
              <edc:DCRFieldSemantic edc:cname="SET" edc:when="(field &amp; 0x1) == 0x0"/>
              <edc:DCRFieldSemantic edc:cname="CLEAR" edc:when="(field &amp; 0x1) == 0x1"/>
            </edc:DCRFieldDef>
          </edc:DCRMode>
        </edc:DCRModeList>
      </edc:DCRDef>
      <edc:DCRDef ltx:memberofperipheral="FUSE" edc:cname="EXTENDED" edc:nzwidth="0x8" edc:impl="0x7" edc:unused="0x0" edc:useinchecksum="0xFF" edc:factorydefault="0xFE" edc:access="-----nnn" edc:_addr="0x2">
        <edc:DCRModeList>
          <edc:DCRMode edc:id="DS.0" ltx:memberofperipheral="FUSE">
            <edc:DCRFieldDef edc:cname="BODLEVEL" edc:nzwidth="0x3" edc:desc="Brown-out Detector trigger level">
              <edc:DCRFieldSemantic edc:cname="DISABLED" edc:desc="Brown-out detection disabled" edc:when="(field &amp; 0x7) == 0x07"/>
              <edc:DCRFieldSemantic edc:cname="1V8" edc:desc="Brown-out detection at VCC=1.8 V" edc:when="(field &amp; 0x7) == 0x06"/>
              <edc:DCRFieldSemantic edc:cname="1V9" edc:desc="Brown-out detection at VCC=1.9 V" edc:when="(field &amp; 0x7) == 0x05"/>
              <edc:DCRFieldSemantic edc:cname="2V0" edc:desc="Brown-out detection at VCC=2.0 V" edc:when="(field &amp; 0x7) == 0x04"/>
              <edc:DCRFieldSemantic edc:cname="2V1" edc:desc="Brown-out detection at VCC=2.1 V" edc:when="(field &amp; 0x7) == 0x03"/>
              <edc:DCRFieldSemantic edc:cname="2V2" edc:desc="Brown-out detection at VCC=2.2 V" edc:when="(field &amp; 0x7) == 0x02"/>
              <edc:DCRFieldSemantic edc:cname="2V3" edc:desc="Brown-out detection at VCC=2.3 V" edc:when="(field &amp; 0x7) == 0x01"/>
              <edc:DCRFieldSemantic edc:cname="2V4" edc:desc="Brown-out detection at VCC=2.4 V" edc:when="(field &amp; 0x7) == 0x00"/>
            </edc:DCRFieldDef>
          </edc:DCRMode>
        </edc:DCRModeList>
      </edc:DCRDef>
    </edc:ConfigFuseSector>
  </edc:FusesSpace>
  <edc:LockbitsSpace edc:magicoffset="0x830000">
    <edc:ConfigFuseSector edc:regionid="LOCKBITS" edc:beginaddr="0x0" edc:endaddr="0x1" edc:magicoffset="0x830000" edc:rw="rw">
      <edc:DCRDef ltx:memberofperipheral="LOCKBIT" edc:cname="LOCKBIT" edc:nzwidth="0x8" edc:impl="0x3F" edc:unused="0x0" edc:useinchecksum="0xFF" edc:factorydefault="0xFF" edc:access="--nnnnnn" edc:_addr="0x0">
        <edc:DCRModeList>
          <edc:DCRMode edc:id="DS.0" ltx:memberofperipheral="LOCKBIT">
            <edc:DCRFieldDef edc:cname="LB" edc:nzwidth="0x2" edc:desc="Memory Lock">
              <edc:DCRFieldSemantic edc:cname="PROG_VER_DISABLED" edc:desc="Further programming and verification disabled" edc:when="(field &amp; 0x3) == 0x00"/>
              <edc:DCRFieldSemantic edc:cname="PROG_DISABLED" edc:desc="Further programming disabled" edc:when="(field &amp; 0x3) == 0x02"/>
              <edc:DCRFieldSemantic edc:cname="NO_LOCK" edc:desc="No memory lock features enabled" edc:when="(field &amp; 0x3) == 0x03"/>
            </edc:DCRFieldDef>
            <edc:DCRFieldDef edc:cname="BLB0" edc:nzwidth="0x2" edc:desc="Boot Loader Protection Mode">
              <edc:DCRFieldSemantic edc:cname="LPM_SPM_DISABLE" edc:desc="LPM and SPM prohibited in Application Section" edc:when="(field &amp; 0x3) == 0x00"/>
              <edc:DCRFieldSemantic edc:cname="LPM_DISABLE" edc:desc="LPM prohibited in Application Section" edc:when="(field &amp; 0x3) == 0x01"/>
              <edc:DCRFieldSemantic edc:cname="SPM_DISABLE" edc:desc="SPM prohibited in Application Section" edc:when="(field &amp; 0x3) == 0x02"/>
              <edc:DCRFieldSemantic edc:cname="NO_LOCK" edc:desc="No lock on SPM and LPM in Application Section" edc:when="(field &amp; 0x3) == 0x03"/>
            </edc:DCRFieldDef>
            <edc:DCRFieldDef edc:cname="BLB1" edc:nzwidth="0x2" edc:desc="Boot Loader Protection Mode">
              <edc:DCRFieldSemantic edc:cname="LPM_SPM_DISABLE" edc:desc="LPM and SPM prohibited in Boot Section" edc:when="(field &amp; 0x3) == 0x00"/>
              <edc:DCRFieldSemantic edc:cname="LPM_DISABLE" edc:desc="LPM prohibited in Boot Section" edc:when="(field &amp; 0x3) == 0x01"/>
              <edc:DCRFieldSemantic edc:cname="SPM_DISABLE" edc:desc="SPM prohibited in Boot Section" edc:when="(field &amp; 0x3) == 0x02"/>
              <edc:DCRFieldSemantic edc:cname="NO_LOCK" edc:desc="No lock on SPM and LPM in Boot Section" edc:when="(field &amp; 0x3) == 0x03"/>
            </edc:DCRFieldDef>
          </edc:DCRMode>
        </edc:DCRModeList>
      </edc:DCRDef>
    </edc:ConfigFuseSector>
  </edc:LockbitsSpace>
</edc:PIC>
